
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Utilizador
 * 
 */
export type Utilizador = $Result.DefaultSelection<Prisma.$UtilizadorPayload>
/**
 * Model Evento
 * 
 */
export type Evento = $Result.DefaultSelection<Prisma.$EventoPayload>
/**
 * Model CategoriaEvento
 * 
 */
export type CategoriaEvento = $Result.DefaultSelection<Prisma.$CategoriaEventoPayload>
/**
 * Model Carrinho
 * 
 */
export type Carrinho = $Result.DefaultSelection<Prisma.$CarrinhoPayload>
/**
 * Model ItensCarrinho
 * 
 */
export type ItensCarrinho = $Result.DefaultSelection<Prisma.$ItensCarrinhoPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Utilizadors
 * const utilizadors = await prisma.utilizador.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Utilizadors
   * const utilizadors = await prisma.utilizador.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.utilizador`: Exposes CRUD operations for the **Utilizador** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Utilizadors
    * const utilizadors = await prisma.utilizador.findMany()
    * ```
    */
  get utilizador(): Prisma.UtilizadorDelegate<ExtArgs>;

  /**
   * `prisma.evento`: Exposes CRUD operations for the **Evento** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Eventos
    * const eventos = await prisma.evento.findMany()
    * ```
    */
  get evento(): Prisma.EventoDelegate<ExtArgs>;

  /**
   * `prisma.categoriaEvento`: Exposes CRUD operations for the **CategoriaEvento** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CategoriaEventos
    * const categoriaEventos = await prisma.categoriaEvento.findMany()
    * ```
    */
  get categoriaEvento(): Prisma.CategoriaEventoDelegate<ExtArgs>;

  /**
   * `prisma.carrinho`: Exposes CRUD operations for the **Carrinho** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Carrinhos
    * const carrinhos = await prisma.carrinho.findMany()
    * ```
    */
  get carrinho(): Prisma.CarrinhoDelegate<ExtArgs>;

  /**
   * `prisma.itensCarrinho`: Exposes CRUD operations for the **ItensCarrinho** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ItensCarrinhos
    * const itensCarrinhos = await prisma.itensCarrinho.findMany()
    * ```
    */
  get itensCarrinho(): Prisma.ItensCarrinhoDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.14.0
   * Query Engine version: b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Utilizador: 'Utilizador',
    Evento: 'Evento',
    CategoriaEvento: 'CategoriaEvento',
    Carrinho: 'Carrinho',
    ItensCarrinho: 'ItensCarrinho'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'utilizador' | 'evento' | 'categoriaEvento' | 'carrinho' | 'itensCarrinho'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Utilizador: {
        payload: Prisma.$UtilizadorPayload<ExtArgs>
        fields: Prisma.UtilizadorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UtilizadorFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UtilizadorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UtilizadorFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UtilizadorPayload>
          }
          findFirst: {
            args: Prisma.UtilizadorFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UtilizadorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UtilizadorFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UtilizadorPayload>
          }
          findMany: {
            args: Prisma.UtilizadorFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UtilizadorPayload>[]
          }
          create: {
            args: Prisma.UtilizadorCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UtilizadorPayload>
          }
          createMany: {
            args: Prisma.UtilizadorCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UtilizadorDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UtilizadorPayload>
          }
          update: {
            args: Prisma.UtilizadorUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UtilizadorPayload>
          }
          deleteMany: {
            args: Prisma.UtilizadorDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UtilizadorUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UtilizadorUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UtilizadorPayload>
          }
          aggregate: {
            args: Prisma.UtilizadorAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUtilizador>
          }
          groupBy: {
            args: Prisma.UtilizadorGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UtilizadorGroupByOutputType>[]
          }
          count: {
            args: Prisma.UtilizadorCountArgs<ExtArgs>,
            result: $Utils.Optional<UtilizadorCountAggregateOutputType> | number
          }
        }
      }
      Evento: {
        payload: Prisma.$EventoPayload<ExtArgs>
        fields: Prisma.EventoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventoPayload>
          }
          findFirst: {
            args: Prisma.EventoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventoPayload>
          }
          findMany: {
            args: Prisma.EventoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventoPayload>[]
          }
          create: {
            args: Prisma.EventoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventoPayload>
          }
          createMany: {
            args: Prisma.EventoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.EventoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventoPayload>
          }
          update: {
            args: Prisma.EventoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventoPayload>
          }
          deleteMany: {
            args: Prisma.EventoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.EventoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.EventoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventoPayload>
          }
          aggregate: {
            args: Prisma.EventoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEvento>
          }
          groupBy: {
            args: Prisma.EventoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EventoGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventoCountArgs<ExtArgs>,
            result: $Utils.Optional<EventoCountAggregateOutputType> | number
          }
        }
      }
      CategoriaEvento: {
        payload: Prisma.$CategoriaEventoPayload<ExtArgs>
        fields: Prisma.CategoriaEventoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoriaEventoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriaEventoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoriaEventoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriaEventoPayload>
          }
          findFirst: {
            args: Prisma.CategoriaEventoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriaEventoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoriaEventoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriaEventoPayload>
          }
          findMany: {
            args: Prisma.CategoriaEventoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriaEventoPayload>[]
          }
          create: {
            args: Prisma.CategoriaEventoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriaEventoPayload>
          }
          createMany: {
            args: Prisma.CategoriaEventoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CategoriaEventoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriaEventoPayload>
          }
          update: {
            args: Prisma.CategoriaEventoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriaEventoPayload>
          }
          deleteMany: {
            args: Prisma.CategoriaEventoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CategoriaEventoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CategoriaEventoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriaEventoPayload>
          }
          aggregate: {
            args: Prisma.CategoriaEventoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCategoriaEvento>
          }
          groupBy: {
            args: Prisma.CategoriaEventoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CategoriaEventoGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoriaEventoCountArgs<ExtArgs>,
            result: $Utils.Optional<CategoriaEventoCountAggregateOutputType> | number
          }
        }
      }
      Carrinho: {
        payload: Prisma.$CarrinhoPayload<ExtArgs>
        fields: Prisma.CarrinhoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CarrinhoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CarrinhoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CarrinhoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CarrinhoPayload>
          }
          findFirst: {
            args: Prisma.CarrinhoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CarrinhoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CarrinhoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CarrinhoPayload>
          }
          findMany: {
            args: Prisma.CarrinhoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CarrinhoPayload>[]
          }
          create: {
            args: Prisma.CarrinhoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CarrinhoPayload>
          }
          createMany: {
            args: Prisma.CarrinhoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CarrinhoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CarrinhoPayload>
          }
          update: {
            args: Prisma.CarrinhoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CarrinhoPayload>
          }
          deleteMany: {
            args: Prisma.CarrinhoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CarrinhoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CarrinhoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CarrinhoPayload>
          }
          aggregate: {
            args: Prisma.CarrinhoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCarrinho>
          }
          groupBy: {
            args: Prisma.CarrinhoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CarrinhoGroupByOutputType>[]
          }
          count: {
            args: Prisma.CarrinhoCountArgs<ExtArgs>,
            result: $Utils.Optional<CarrinhoCountAggregateOutputType> | number
          }
        }
      }
      ItensCarrinho: {
        payload: Prisma.$ItensCarrinhoPayload<ExtArgs>
        fields: Prisma.ItensCarrinhoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ItensCarrinhoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ItensCarrinhoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ItensCarrinhoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ItensCarrinhoPayload>
          }
          findFirst: {
            args: Prisma.ItensCarrinhoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ItensCarrinhoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ItensCarrinhoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ItensCarrinhoPayload>
          }
          findMany: {
            args: Prisma.ItensCarrinhoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ItensCarrinhoPayload>[]
          }
          create: {
            args: Prisma.ItensCarrinhoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ItensCarrinhoPayload>
          }
          createMany: {
            args: Prisma.ItensCarrinhoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ItensCarrinhoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ItensCarrinhoPayload>
          }
          update: {
            args: Prisma.ItensCarrinhoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ItensCarrinhoPayload>
          }
          deleteMany: {
            args: Prisma.ItensCarrinhoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ItensCarrinhoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ItensCarrinhoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ItensCarrinhoPayload>
          }
          aggregate: {
            args: Prisma.ItensCarrinhoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateItensCarrinho>
          }
          groupBy: {
            args: Prisma.ItensCarrinhoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ItensCarrinhoGroupByOutputType>[]
          }
          count: {
            args: Prisma.ItensCarrinhoCountArgs<ExtArgs>,
            result: $Utils.Optional<ItensCarrinhoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UtilizadorCountOutputType
   */

  export type UtilizadorCountOutputType = {
    carrinhos: number
  }

  export type UtilizadorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    carrinhos?: boolean | UtilizadorCountOutputTypeCountCarrinhosArgs
  }

  // Custom InputTypes
  /**
   * UtilizadorCountOutputType without action
   */
  export type UtilizadorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UtilizadorCountOutputType
     */
    select?: UtilizadorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UtilizadorCountOutputType without action
   */
  export type UtilizadorCountOutputTypeCountCarrinhosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CarrinhoWhereInput
  }


  /**
   * Count Type EventoCountOutputType
   */

  export type EventoCountOutputType = {
    itensCarrinho: number
  }

  export type EventoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    itensCarrinho?: boolean | EventoCountOutputTypeCountItensCarrinhoArgs
  }

  // Custom InputTypes
  /**
   * EventoCountOutputType without action
   */
  export type EventoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventoCountOutputType
     */
    select?: EventoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EventoCountOutputType without action
   */
  export type EventoCountOutputTypeCountItensCarrinhoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItensCarrinhoWhereInput
  }


  /**
   * Count Type CategoriaEventoCountOutputType
   */

  export type CategoriaEventoCountOutputType = {
    eventos: number
  }

  export type CategoriaEventoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    eventos?: boolean | CategoriaEventoCountOutputTypeCountEventosArgs
  }

  // Custom InputTypes
  /**
   * CategoriaEventoCountOutputType without action
   */
  export type CategoriaEventoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaEventoCountOutputType
     */
    select?: CategoriaEventoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoriaEventoCountOutputType without action
   */
  export type CategoriaEventoCountOutputTypeCountEventosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventoWhereInput
  }


  /**
   * Count Type CarrinhoCountOutputType
   */

  export type CarrinhoCountOutputType = {
    itens: number
  }

  export type CarrinhoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    itens?: boolean | CarrinhoCountOutputTypeCountItensArgs
  }

  // Custom InputTypes
  /**
   * CarrinhoCountOutputType without action
   */
  export type CarrinhoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CarrinhoCountOutputType
     */
    select?: CarrinhoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CarrinhoCountOutputType without action
   */
  export type CarrinhoCountOutputTypeCountItensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItensCarrinhoWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Utilizador
   */

  export type AggregateUtilizador = {
    _count: UtilizadorCountAggregateOutputType | null
    _avg: UtilizadorAvgAggregateOutputType | null
    _sum: UtilizadorSumAggregateOutputType | null
    _min: UtilizadorMinAggregateOutputType | null
    _max: UtilizadorMaxAggregateOutputType | null
  }

  export type UtilizadorAvgAggregateOutputType = {
    id: number | null
  }

  export type UtilizadorSumAggregateOutputType = {
    id: number | null
  }

  export type UtilizadorMinAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    isAdmin: boolean | null
    password: string | null
    numtel: string | null
  }

  export type UtilizadorMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    isAdmin: boolean | null
    password: string | null
    numtel: string | null
  }

  export type UtilizadorCountAggregateOutputType = {
    id: number
    nome: number
    email: number
    isAdmin: number
    password: number
    numtel: number
    _all: number
  }


  export type UtilizadorAvgAggregateInputType = {
    id?: true
  }

  export type UtilizadorSumAggregateInputType = {
    id?: true
  }

  export type UtilizadorMinAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    isAdmin?: true
    password?: true
    numtel?: true
  }

  export type UtilizadorMaxAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    isAdmin?: true
    password?: true
    numtel?: true
  }

  export type UtilizadorCountAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    isAdmin?: true
    password?: true
    numtel?: true
    _all?: true
  }

  export type UtilizadorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Utilizador to aggregate.
     */
    where?: UtilizadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Utilizadors to fetch.
     */
    orderBy?: UtilizadorOrderByWithRelationInput | UtilizadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UtilizadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Utilizadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Utilizadors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Utilizadors
    **/
    _count?: true | UtilizadorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UtilizadorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UtilizadorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UtilizadorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UtilizadorMaxAggregateInputType
  }

  export type GetUtilizadorAggregateType<T extends UtilizadorAggregateArgs> = {
        [P in keyof T & keyof AggregateUtilizador]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUtilizador[P]>
      : GetScalarType<T[P], AggregateUtilizador[P]>
  }




  export type UtilizadorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UtilizadorWhereInput
    orderBy?: UtilizadorOrderByWithAggregationInput | UtilizadorOrderByWithAggregationInput[]
    by: UtilizadorScalarFieldEnum[] | UtilizadorScalarFieldEnum
    having?: UtilizadorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UtilizadorCountAggregateInputType | true
    _avg?: UtilizadorAvgAggregateInputType
    _sum?: UtilizadorSumAggregateInputType
    _min?: UtilizadorMinAggregateInputType
    _max?: UtilizadorMaxAggregateInputType
  }

  export type UtilizadorGroupByOutputType = {
    id: number
    nome: string
    email: string
    isAdmin: boolean
    password: string
    numtel: string
    _count: UtilizadorCountAggregateOutputType | null
    _avg: UtilizadorAvgAggregateOutputType | null
    _sum: UtilizadorSumAggregateOutputType | null
    _min: UtilizadorMinAggregateOutputType | null
    _max: UtilizadorMaxAggregateOutputType | null
  }

  type GetUtilizadorGroupByPayload<T extends UtilizadorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UtilizadorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UtilizadorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UtilizadorGroupByOutputType[P]>
            : GetScalarType<T[P], UtilizadorGroupByOutputType[P]>
        }
      >
    >


  export type UtilizadorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    isAdmin?: boolean
    password?: boolean
    numtel?: boolean
    carrinhos?: boolean | Utilizador$carrinhosArgs<ExtArgs>
    _count?: boolean | UtilizadorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["utilizador"]>

  export type UtilizadorSelectScalar = {
    id?: boolean
    nome?: boolean
    email?: boolean
    isAdmin?: boolean
    password?: boolean
    numtel?: boolean
  }


  export type UtilizadorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    carrinhos?: boolean | Utilizador$carrinhosArgs<ExtArgs>
    _count?: boolean | UtilizadorCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UtilizadorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Utilizador"
    objects: {
      carrinhos: Prisma.$CarrinhoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      email: string
      isAdmin: boolean
      password: string
      numtel: string
    }, ExtArgs["result"]["utilizador"]>
    composites: {}
  }


  type UtilizadorGetPayload<S extends boolean | null | undefined | UtilizadorDefaultArgs> = $Result.GetResult<Prisma.$UtilizadorPayload, S>

  type UtilizadorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UtilizadorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UtilizadorCountAggregateInputType | true
    }

  export interface UtilizadorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Utilizador'], meta: { name: 'Utilizador' } }
    /**
     * Find zero or one Utilizador that matches the filter.
     * @param {UtilizadorFindUniqueArgs} args - Arguments to find a Utilizador
     * @example
     * // Get one Utilizador
     * const utilizador = await prisma.utilizador.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UtilizadorFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UtilizadorFindUniqueArgs<ExtArgs>>
    ): Prisma__UtilizadorClient<$Result.GetResult<Prisma.$UtilizadorPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Utilizador that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UtilizadorFindUniqueOrThrowArgs} args - Arguments to find a Utilizador
     * @example
     * // Get one Utilizador
     * const utilizador = await prisma.utilizador.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UtilizadorFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UtilizadorFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UtilizadorClient<$Result.GetResult<Prisma.$UtilizadorPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Utilizador that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilizadorFindFirstArgs} args - Arguments to find a Utilizador
     * @example
     * // Get one Utilizador
     * const utilizador = await prisma.utilizador.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UtilizadorFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UtilizadorFindFirstArgs<ExtArgs>>
    ): Prisma__UtilizadorClient<$Result.GetResult<Prisma.$UtilizadorPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Utilizador that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilizadorFindFirstOrThrowArgs} args - Arguments to find a Utilizador
     * @example
     * // Get one Utilizador
     * const utilizador = await prisma.utilizador.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UtilizadorFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UtilizadorFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UtilizadorClient<$Result.GetResult<Prisma.$UtilizadorPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Utilizadors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilizadorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Utilizadors
     * const utilizadors = await prisma.utilizador.findMany()
     * 
     * // Get first 10 Utilizadors
     * const utilizadors = await prisma.utilizador.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const utilizadorWithIdOnly = await prisma.utilizador.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UtilizadorFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UtilizadorFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UtilizadorPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Utilizador.
     * @param {UtilizadorCreateArgs} args - Arguments to create a Utilizador.
     * @example
     * // Create one Utilizador
     * const Utilizador = await prisma.utilizador.create({
     *   data: {
     *     // ... data to create a Utilizador
     *   }
     * })
     * 
    **/
    create<T extends UtilizadorCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UtilizadorCreateArgs<ExtArgs>>
    ): Prisma__UtilizadorClient<$Result.GetResult<Prisma.$UtilizadorPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Utilizadors.
     * @param {UtilizadorCreateManyArgs} args - Arguments to create many Utilizadors.
     * @example
     * // Create many Utilizadors
     * const utilizador = await prisma.utilizador.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends UtilizadorCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UtilizadorCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Utilizador.
     * @param {UtilizadorDeleteArgs} args - Arguments to delete one Utilizador.
     * @example
     * // Delete one Utilizador
     * const Utilizador = await prisma.utilizador.delete({
     *   where: {
     *     // ... filter to delete one Utilizador
     *   }
     * })
     * 
    **/
    delete<T extends UtilizadorDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UtilizadorDeleteArgs<ExtArgs>>
    ): Prisma__UtilizadorClient<$Result.GetResult<Prisma.$UtilizadorPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Utilizador.
     * @param {UtilizadorUpdateArgs} args - Arguments to update one Utilizador.
     * @example
     * // Update one Utilizador
     * const utilizador = await prisma.utilizador.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UtilizadorUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UtilizadorUpdateArgs<ExtArgs>>
    ): Prisma__UtilizadorClient<$Result.GetResult<Prisma.$UtilizadorPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Utilizadors.
     * @param {UtilizadorDeleteManyArgs} args - Arguments to filter Utilizadors to delete.
     * @example
     * // Delete a few Utilizadors
     * const { count } = await prisma.utilizador.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UtilizadorDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UtilizadorDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Utilizadors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilizadorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Utilizadors
     * const utilizador = await prisma.utilizador.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UtilizadorUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UtilizadorUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Utilizador.
     * @param {UtilizadorUpsertArgs} args - Arguments to update or create a Utilizador.
     * @example
     * // Update or create a Utilizador
     * const utilizador = await prisma.utilizador.upsert({
     *   create: {
     *     // ... data to create a Utilizador
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Utilizador we want to update
     *   }
     * })
    **/
    upsert<T extends UtilizadorUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UtilizadorUpsertArgs<ExtArgs>>
    ): Prisma__UtilizadorClient<$Result.GetResult<Prisma.$UtilizadorPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Utilizadors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilizadorCountArgs} args - Arguments to filter Utilizadors to count.
     * @example
     * // Count the number of Utilizadors
     * const count = await prisma.utilizador.count({
     *   where: {
     *     // ... the filter for the Utilizadors we want to count
     *   }
     * })
    **/
    count<T extends UtilizadorCountArgs>(
      args?: Subset<T, UtilizadorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UtilizadorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Utilizador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilizadorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UtilizadorAggregateArgs>(args: Subset<T, UtilizadorAggregateArgs>): Prisma.PrismaPromise<GetUtilizadorAggregateType<T>>

    /**
     * Group by Utilizador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilizadorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UtilizadorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UtilizadorGroupByArgs['orderBy'] }
        : { orderBy?: UtilizadorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UtilizadorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUtilizadorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Utilizador model
   */
  readonly fields: UtilizadorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Utilizador.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UtilizadorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    carrinhos<T extends Utilizador$carrinhosArgs<ExtArgs> = {}>(args?: Subset<T, Utilizador$carrinhosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CarrinhoPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Utilizador model
   */ 
  interface UtilizadorFieldRefs {
    readonly id: FieldRef<"Utilizador", 'Int'>
    readonly nome: FieldRef<"Utilizador", 'String'>
    readonly email: FieldRef<"Utilizador", 'String'>
    readonly isAdmin: FieldRef<"Utilizador", 'Boolean'>
    readonly password: FieldRef<"Utilizador", 'String'>
    readonly numtel: FieldRef<"Utilizador", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Utilizador findUnique
   */
  export type UtilizadorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilizador
     */
    select?: UtilizadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilizadorInclude<ExtArgs> | null
    /**
     * Filter, which Utilizador to fetch.
     */
    where: UtilizadorWhereUniqueInput
  }

  /**
   * Utilizador findUniqueOrThrow
   */
  export type UtilizadorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilizador
     */
    select?: UtilizadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilizadorInclude<ExtArgs> | null
    /**
     * Filter, which Utilizador to fetch.
     */
    where: UtilizadorWhereUniqueInput
  }

  /**
   * Utilizador findFirst
   */
  export type UtilizadorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilizador
     */
    select?: UtilizadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilizadorInclude<ExtArgs> | null
    /**
     * Filter, which Utilizador to fetch.
     */
    where?: UtilizadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Utilizadors to fetch.
     */
    orderBy?: UtilizadorOrderByWithRelationInput | UtilizadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Utilizadors.
     */
    cursor?: UtilizadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Utilizadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Utilizadors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Utilizadors.
     */
    distinct?: UtilizadorScalarFieldEnum | UtilizadorScalarFieldEnum[]
  }

  /**
   * Utilizador findFirstOrThrow
   */
  export type UtilizadorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilizador
     */
    select?: UtilizadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilizadorInclude<ExtArgs> | null
    /**
     * Filter, which Utilizador to fetch.
     */
    where?: UtilizadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Utilizadors to fetch.
     */
    orderBy?: UtilizadorOrderByWithRelationInput | UtilizadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Utilizadors.
     */
    cursor?: UtilizadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Utilizadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Utilizadors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Utilizadors.
     */
    distinct?: UtilizadorScalarFieldEnum | UtilizadorScalarFieldEnum[]
  }

  /**
   * Utilizador findMany
   */
  export type UtilizadorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilizador
     */
    select?: UtilizadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilizadorInclude<ExtArgs> | null
    /**
     * Filter, which Utilizadors to fetch.
     */
    where?: UtilizadorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Utilizadors to fetch.
     */
    orderBy?: UtilizadorOrderByWithRelationInput | UtilizadorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Utilizadors.
     */
    cursor?: UtilizadorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Utilizadors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Utilizadors.
     */
    skip?: number
    distinct?: UtilizadorScalarFieldEnum | UtilizadorScalarFieldEnum[]
  }

  /**
   * Utilizador create
   */
  export type UtilizadorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilizador
     */
    select?: UtilizadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilizadorInclude<ExtArgs> | null
    /**
     * The data needed to create a Utilizador.
     */
    data: XOR<UtilizadorCreateInput, UtilizadorUncheckedCreateInput>
  }

  /**
   * Utilizador createMany
   */
  export type UtilizadorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Utilizadors.
     */
    data: UtilizadorCreateManyInput | UtilizadorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Utilizador update
   */
  export type UtilizadorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilizador
     */
    select?: UtilizadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilizadorInclude<ExtArgs> | null
    /**
     * The data needed to update a Utilizador.
     */
    data: XOR<UtilizadorUpdateInput, UtilizadorUncheckedUpdateInput>
    /**
     * Choose, which Utilizador to update.
     */
    where: UtilizadorWhereUniqueInput
  }

  /**
   * Utilizador updateMany
   */
  export type UtilizadorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Utilizadors.
     */
    data: XOR<UtilizadorUpdateManyMutationInput, UtilizadorUncheckedUpdateManyInput>
    /**
     * Filter which Utilizadors to update
     */
    where?: UtilizadorWhereInput
  }

  /**
   * Utilizador upsert
   */
  export type UtilizadorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilizador
     */
    select?: UtilizadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilizadorInclude<ExtArgs> | null
    /**
     * The filter to search for the Utilizador to update in case it exists.
     */
    where: UtilizadorWhereUniqueInput
    /**
     * In case the Utilizador found by the `where` argument doesn't exist, create a new Utilizador with this data.
     */
    create: XOR<UtilizadorCreateInput, UtilizadorUncheckedCreateInput>
    /**
     * In case the Utilizador was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UtilizadorUpdateInput, UtilizadorUncheckedUpdateInput>
  }

  /**
   * Utilizador delete
   */
  export type UtilizadorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilizador
     */
    select?: UtilizadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilizadorInclude<ExtArgs> | null
    /**
     * Filter which Utilizador to delete.
     */
    where: UtilizadorWhereUniqueInput
  }

  /**
   * Utilizador deleteMany
   */
  export type UtilizadorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Utilizadors to delete
     */
    where?: UtilizadorWhereInput
  }

  /**
   * Utilizador.carrinhos
   */
  export type Utilizador$carrinhosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrinho
     */
    select?: CarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarrinhoInclude<ExtArgs> | null
    where?: CarrinhoWhereInput
    orderBy?: CarrinhoOrderByWithRelationInput | CarrinhoOrderByWithRelationInput[]
    cursor?: CarrinhoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CarrinhoScalarFieldEnum | CarrinhoScalarFieldEnum[]
  }

  /**
   * Utilizador without action
   */
  export type UtilizadorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Utilizador
     */
    select?: UtilizadorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UtilizadorInclude<ExtArgs> | null
  }


  /**
   * Model Evento
   */

  export type AggregateEvento = {
    _count: EventoCountAggregateOutputType | null
    _avg: EventoAvgAggregateOutputType | null
    _sum: EventoSumAggregateOutputType | null
    _min: EventoMinAggregateOutputType | null
    _max: EventoMaxAggregateOutputType | null
  }

  export type EventoAvgAggregateOutputType = {
    id: number | null
    preco: number | null
    quantidade: number | null
    categoriaEventoId: number | null
  }

  export type EventoSumAggregateOutputType = {
    id: number | null
    preco: number | null
    quantidade: number | null
    categoriaEventoId: number | null
  }

  export type EventoMinAggregateOutputType = {
    id: number | null
    nome: string | null
    data: Date | null
    localizacao: string | null
    foto: string | null
    descricao: string | null
    preco: number | null
    quantidade: number | null
    categoriaEventoId: number | null
  }

  export type EventoMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    data: Date | null
    localizacao: string | null
    foto: string | null
    descricao: string | null
    preco: number | null
    quantidade: number | null
    categoriaEventoId: number | null
  }

  export type EventoCountAggregateOutputType = {
    id: number
    nome: number
    data: number
    localizacao: number
    foto: number
    descricao: number
    preco: number
    quantidade: number
    categoriaEventoId: number
    _all: number
  }


  export type EventoAvgAggregateInputType = {
    id?: true
    preco?: true
    quantidade?: true
    categoriaEventoId?: true
  }

  export type EventoSumAggregateInputType = {
    id?: true
    preco?: true
    quantidade?: true
    categoriaEventoId?: true
  }

  export type EventoMinAggregateInputType = {
    id?: true
    nome?: true
    data?: true
    localizacao?: true
    foto?: true
    descricao?: true
    preco?: true
    quantidade?: true
    categoriaEventoId?: true
  }

  export type EventoMaxAggregateInputType = {
    id?: true
    nome?: true
    data?: true
    localizacao?: true
    foto?: true
    descricao?: true
    preco?: true
    quantidade?: true
    categoriaEventoId?: true
  }

  export type EventoCountAggregateInputType = {
    id?: true
    nome?: true
    data?: true
    localizacao?: true
    foto?: true
    descricao?: true
    preco?: true
    quantidade?: true
    categoriaEventoId?: true
    _all?: true
  }

  export type EventoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Evento to aggregate.
     */
    where?: EventoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Eventos to fetch.
     */
    orderBy?: EventoOrderByWithRelationInput | EventoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Eventos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Eventos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Eventos
    **/
    _count?: true | EventoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventoMaxAggregateInputType
  }

  export type GetEventoAggregateType<T extends EventoAggregateArgs> = {
        [P in keyof T & keyof AggregateEvento]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvento[P]>
      : GetScalarType<T[P], AggregateEvento[P]>
  }




  export type EventoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventoWhereInput
    orderBy?: EventoOrderByWithAggregationInput | EventoOrderByWithAggregationInput[]
    by: EventoScalarFieldEnum[] | EventoScalarFieldEnum
    having?: EventoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventoCountAggregateInputType | true
    _avg?: EventoAvgAggregateInputType
    _sum?: EventoSumAggregateInputType
    _min?: EventoMinAggregateInputType
    _max?: EventoMaxAggregateInputType
  }

  export type EventoGroupByOutputType = {
    id: number
    nome: string
    data: Date
    localizacao: string
    foto: string
    descricao: string
    preco: number
    quantidade: number
    categoriaEventoId: number
    _count: EventoCountAggregateOutputType | null
    _avg: EventoAvgAggregateOutputType | null
    _sum: EventoSumAggregateOutputType | null
    _min: EventoMinAggregateOutputType | null
    _max: EventoMaxAggregateOutputType | null
  }

  type GetEventoGroupByPayload<T extends EventoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventoGroupByOutputType[P]>
            : GetScalarType<T[P], EventoGroupByOutputType[P]>
        }
      >
    >


  export type EventoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    data?: boolean
    localizacao?: boolean
    foto?: boolean
    descricao?: boolean
    preco?: boolean
    quantidade?: boolean
    categoriaEventoId?: boolean
    categoria?: boolean | CategoriaEventoDefaultArgs<ExtArgs>
    itensCarrinho?: boolean | Evento$itensCarrinhoArgs<ExtArgs>
    _count?: boolean | EventoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["evento"]>

  export type EventoSelectScalar = {
    id?: boolean
    nome?: boolean
    data?: boolean
    localizacao?: boolean
    foto?: boolean
    descricao?: boolean
    preco?: boolean
    quantidade?: boolean
    categoriaEventoId?: boolean
  }


  export type EventoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categoria?: boolean | CategoriaEventoDefaultArgs<ExtArgs>
    itensCarrinho?: boolean | Evento$itensCarrinhoArgs<ExtArgs>
    _count?: boolean | EventoCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $EventoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Evento"
    objects: {
      categoria: Prisma.$CategoriaEventoPayload<ExtArgs>
      itensCarrinho: Prisma.$ItensCarrinhoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      data: Date
      localizacao: string
      foto: string
      descricao: string
      preco: number
      quantidade: number
      categoriaEventoId: number
    }, ExtArgs["result"]["evento"]>
    composites: {}
  }


  type EventoGetPayload<S extends boolean | null | undefined | EventoDefaultArgs> = $Result.GetResult<Prisma.$EventoPayload, S>

  type EventoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EventoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EventoCountAggregateInputType | true
    }

  export interface EventoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Evento'], meta: { name: 'Evento' } }
    /**
     * Find zero or one Evento that matches the filter.
     * @param {EventoFindUniqueArgs} args - Arguments to find a Evento
     * @example
     * // Get one Evento
     * const evento = await prisma.evento.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EventoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, EventoFindUniqueArgs<ExtArgs>>
    ): Prisma__EventoClient<$Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Evento that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EventoFindUniqueOrThrowArgs} args - Arguments to find a Evento
     * @example
     * // Get one Evento
     * const evento = await prisma.evento.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EventoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EventoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__EventoClient<$Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Evento that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventoFindFirstArgs} args - Arguments to find a Evento
     * @example
     * // Get one Evento
     * const evento = await prisma.evento.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EventoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, EventoFindFirstArgs<ExtArgs>>
    ): Prisma__EventoClient<$Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Evento that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventoFindFirstOrThrowArgs} args - Arguments to find a Evento
     * @example
     * // Get one Evento
     * const evento = await prisma.evento.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EventoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EventoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__EventoClient<$Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Eventos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Eventos
     * const eventos = await prisma.evento.findMany()
     * 
     * // Get first 10 Eventos
     * const eventos = await prisma.evento.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventoWithIdOnly = await prisma.evento.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EventoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EventoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Evento.
     * @param {EventoCreateArgs} args - Arguments to create a Evento.
     * @example
     * // Create one Evento
     * const Evento = await prisma.evento.create({
     *   data: {
     *     // ... data to create a Evento
     *   }
     * })
     * 
    **/
    create<T extends EventoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, EventoCreateArgs<ExtArgs>>
    ): Prisma__EventoClient<$Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Eventos.
     * @param {EventoCreateManyArgs} args - Arguments to create many Eventos.
     * @example
     * // Create many Eventos
     * const evento = await prisma.evento.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends EventoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EventoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Evento.
     * @param {EventoDeleteArgs} args - Arguments to delete one Evento.
     * @example
     * // Delete one Evento
     * const Evento = await prisma.evento.delete({
     *   where: {
     *     // ... filter to delete one Evento
     *   }
     * })
     * 
    **/
    delete<T extends EventoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, EventoDeleteArgs<ExtArgs>>
    ): Prisma__EventoClient<$Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Evento.
     * @param {EventoUpdateArgs} args - Arguments to update one Evento.
     * @example
     * // Update one Evento
     * const evento = await prisma.evento.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EventoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, EventoUpdateArgs<ExtArgs>>
    ): Prisma__EventoClient<$Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Eventos.
     * @param {EventoDeleteManyArgs} args - Arguments to filter Eventos to delete.
     * @example
     * // Delete a few Eventos
     * const { count } = await prisma.evento.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EventoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EventoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Eventos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Eventos
     * const evento = await prisma.evento.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EventoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, EventoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Evento.
     * @param {EventoUpsertArgs} args - Arguments to update or create a Evento.
     * @example
     * // Update or create a Evento
     * const evento = await prisma.evento.upsert({
     *   create: {
     *     // ... data to create a Evento
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Evento we want to update
     *   }
     * })
    **/
    upsert<T extends EventoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, EventoUpsertArgs<ExtArgs>>
    ): Prisma__EventoClient<$Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Eventos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventoCountArgs} args - Arguments to filter Eventos to count.
     * @example
     * // Count the number of Eventos
     * const count = await prisma.evento.count({
     *   where: {
     *     // ... the filter for the Eventos we want to count
     *   }
     * })
    **/
    count<T extends EventoCountArgs>(
      args?: Subset<T, EventoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Evento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventoAggregateArgs>(args: Subset<T, EventoAggregateArgs>): Prisma.PrismaPromise<GetEventoAggregateType<T>>

    /**
     * Group by Evento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventoGroupByArgs['orderBy'] }
        : { orderBy?: EventoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Evento model
   */
  readonly fields: EventoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Evento.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    categoria<T extends CategoriaEventoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoriaEventoDefaultArgs<ExtArgs>>): Prisma__CategoriaEventoClient<$Result.GetResult<Prisma.$CategoriaEventoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    itensCarrinho<T extends Evento$itensCarrinhoArgs<ExtArgs> = {}>(args?: Subset<T, Evento$itensCarrinhoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItensCarrinhoPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Evento model
   */ 
  interface EventoFieldRefs {
    readonly id: FieldRef<"Evento", 'Int'>
    readonly nome: FieldRef<"Evento", 'String'>
    readonly data: FieldRef<"Evento", 'DateTime'>
    readonly localizacao: FieldRef<"Evento", 'String'>
    readonly foto: FieldRef<"Evento", 'String'>
    readonly descricao: FieldRef<"Evento", 'String'>
    readonly preco: FieldRef<"Evento", 'Float'>
    readonly quantidade: FieldRef<"Evento", 'Int'>
    readonly categoriaEventoId: FieldRef<"Evento", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Evento findUnique
   */
  export type EventoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventoInclude<ExtArgs> | null
    /**
     * Filter, which Evento to fetch.
     */
    where: EventoWhereUniqueInput
  }

  /**
   * Evento findUniqueOrThrow
   */
  export type EventoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventoInclude<ExtArgs> | null
    /**
     * Filter, which Evento to fetch.
     */
    where: EventoWhereUniqueInput
  }

  /**
   * Evento findFirst
   */
  export type EventoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventoInclude<ExtArgs> | null
    /**
     * Filter, which Evento to fetch.
     */
    where?: EventoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Eventos to fetch.
     */
    orderBy?: EventoOrderByWithRelationInput | EventoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Eventos.
     */
    cursor?: EventoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Eventos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Eventos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Eventos.
     */
    distinct?: EventoScalarFieldEnum | EventoScalarFieldEnum[]
  }

  /**
   * Evento findFirstOrThrow
   */
  export type EventoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventoInclude<ExtArgs> | null
    /**
     * Filter, which Evento to fetch.
     */
    where?: EventoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Eventos to fetch.
     */
    orderBy?: EventoOrderByWithRelationInput | EventoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Eventos.
     */
    cursor?: EventoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Eventos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Eventos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Eventos.
     */
    distinct?: EventoScalarFieldEnum | EventoScalarFieldEnum[]
  }

  /**
   * Evento findMany
   */
  export type EventoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventoInclude<ExtArgs> | null
    /**
     * Filter, which Eventos to fetch.
     */
    where?: EventoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Eventos to fetch.
     */
    orderBy?: EventoOrderByWithRelationInput | EventoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Eventos.
     */
    cursor?: EventoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Eventos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Eventos.
     */
    skip?: number
    distinct?: EventoScalarFieldEnum | EventoScalarFieldEnum[]
  }

  /**
   * Evento create
   */
  export type EventoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventoInclude<ExtArgs> | null
    /**
     * The data needed to create a Evento.
     */
    data: XOR<EventoCreateInput, EventoUncheckedCreateInput>
  }

  /**
   * Evento createMany
   */
  export type EventoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Eventos.
     */
    data: EventoCreateManyInput | EventoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Evento update
   */
  export type EventoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventoInclude<ExtArgs> | null
    /**
     * The data needed to update a Evento.
     */
    data: XOR<EventoUpdateInput, EventoUncheckedUpdateInput>
    /**
     * Choose, which Evento to update.
     */
    where: EventoWhereUniqueInput
  }

  /**
   * Evento updateMany
   */
  export type EventoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Eventos.
     */
    data: XOR<EventoUpdateManyMutationInput, EventoUncheckedUpdateManyInput>
    /**
     * Filter which Eventos to update
     */
    where?: EventoWhereInput
  }

  /**
   * Evento upsert
   */
  export type EventoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventoInclude<ExtArgs> | null
    /**
     * The filter to search for the Evento to update in case it exists.
     */
    where: EventoWhereUniqueInput
    /**
     * In case the Evento found by the `where` argument doesn't exist, create a new Evento with this data.
     */
    create: XOR<EventoCreateInput, EventoUncheckedCreateInput>
    /**
     * In case the Evento was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventoUpdateInput, EventoUncheckedUpdateInput>
  }

  /**
   * Evento delete
   */
  export type EventoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventoInclude<ExtArgs> | null
    /**
     * Filter which Evento to delete.
     */
    where: EventoWhereUniqueInput
  }

  /**
   * Evento deleteMany
   */
  export type EventoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Eventos to delete
     */
    where?: EventoWhereInput
  }

  /**
   * Evento.itensCarrinho
   */
  export type Evento$itensCarrinhoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItensCarrinho
     */
    select?: ItensCarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItensCarrinhoInclude<ExtArgs> | null
    where?: ItensCarrinhoWhereInput
    orderBy?: ItensCarrinhoOrderByWithRelationInput | ItensCarrinhoOrderByWithRelationInput[]
    cursor?: ItensCarrinhoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ItensCarrinhoScalarFieldEnum | ItensCarrinhoScalarFieldEnum[]
  }

  /**
   * Evento without action
   */
  export type EventoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventoInclude<ExtArgs> | null
  }


  /**
   * Model CategoriaEvento
   */

  export type AggregateCategoriaEvento = {
    _count: CategoriaEventoCountAggregateOutputType | null
    _avg: CategoriaEventoAvgAggregateOutputType | null
    _sum: CategoriaEventoSumAggregateOutputType | null
    _min: CategoriaEventoMinAggregateOutputType | null
    _max: CategoriaEventoMaxAggregateOutputType | null
  }

  export type CategoriaEventoAvgAggregateOutputType = {
    id: number | null
  }

  export type CategoriaEventoSumAggregateOutputType = {
    id: number | null
  }

  export type CategoriaEventoMinAggregateOutputType = {
    id: number | null
    nome: string | null
  }

  export type CategoriaEventoMaxAggregateOutputType = {
    id: number | null
    nome: string | null
  }

  export type CategoriaEventoCountAggregateOutputType = {
    id: number
    nome: number
    _all: number
  }


  export type CategoriaEventoAvgAggregateInputType = {
    id?: true
  }

  export type CategoriaEventoSumAggregateInputType = {
    id?: true
  }

  export type CategoriaEventoMinAggregateInputType = {
    id?: true
    nome?: true
  }

  export type CategoriaEventoMaxAggregateInputType = {
    id?: true
    nome?: true
  }

  export type CategoriaEventoCountAggregateInputType = {
    id?: true
    nome?: true
    _all?: true
  }

  export type CategoriaEventoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CategoriaEvento to aggregate.
     */
    where?: CategoriaEventoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoriaEventos to fetch.
     */
    orderBy?: CategoriaEventoOrderByWithRelationInput | CategoriaEventoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoriaEventoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoriaEventos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoriaEventos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CategoriaEventos
    **/
    _count?: true | CategoriaEventoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoriaEventoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategoriaEventoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoriaEventoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoriaEventoMaxAggregateInputType
  }

  export type GetCategoriaEventoAggregateType<T extends CategoriaEventoAggregateArgs> = {
        [P in keyof T & keyof AggregateCategoriaEvento]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategoriaEvento[P]>
      : GetScalarType<T[P], AggregateCategoriaEvento[P]>
  }




  export type CategoriaEventoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoriaEventoWhereInput
    orderBy?: CategoriaEventoOrderByWithAggregationInput | CategoriaEventoOrderByWithAggregationInput[]
    by: CategoriaEventoScalarFieldEnum[] | CategoriaEventoScalarFieldEnum
    having?: CategoriaEventoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoriaEventoCountAggregateInputType | true
    _avg?: CategoriaEventoAvgAggregateInputType
    _sum?: CategoriaEventoSumAggregateInputType
    _min?: CategoriaEventoMinAggregateInputType
    _max?: CategoriaEventoMaxAggregateInputType
  }

  export type CategoriaEventoGroupByOutputType = {
    id: number
    nome: string
    _count: CategoriaEventoCountAggregateOutputType | null
    _avg: CategoriaEventoAvgAggregateOutputType | null
    _sum: CategoriaEventoSumAggregateOutputType | null
    _min: CategoriaEventoMinAggregateOutputType | null
    _max: CategoriaEventoMaxAggregateOutputType | null
  }

  type GetCategoriaEventoGroupByPayload<T extends CategoriaEventoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoriaEventoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoriaEventoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoriaEventoGroupByOutputType[P]>
            : GetScalarType<T[P], CategoriaEventoGroupByOutputType[P]>
        }
      >
    >


  export type CategoriaEventoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    eventos?: boolean | CategoriaEvento$eventosArgs<ExtArgs>
    _count?: boolean | CategoriaEventoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["categoriaEvento"]>

  export type CategoriaEventoSelectScalar = {
    id?: boolean
    nome?: boolean
  }


  export type CategoriaEventoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    eventos?: boolean | CategoriaEvento$eventosArgs<ExtArgs>
    _count?: boolean | CategoriaEventoCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CategoriaEventoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CategoriaEvento"
    objects: {
      eventos: Prisma.$EventoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
    }, ExtArgs["result"]["categoriaEvento"]>
    composites: {}
  }


  type CategoriaEventoGetPayload<S extends boolean | null | undefined | CategoriaEventoDefaultArgs> = $Result.GetResult<Prisma.$CategoriaEventoPayload, S>

  type CategoriaEventoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CategoriaEventoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategoriaEventoCountAggregateInputType | true
    }

  export interface CategoriaEventoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CategoriaEvento'], meta: { name: 'CategoriaEvento' } }
    /**
     * Find zero or one CategoriaEvento that matches the filter.
     * @param {CategoriaEventoFindUniqueArgs} args - Arguments to find a CategoriaEvento
     * @example
     * // Get one CategoriaEvento
     * const categoriaEvento = await prisma.categoriaEvento.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategoriaEventoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CategoriaEventoFindUniqueArgs<ExtArgs>>
    ): Prisma__CategoriaEventoClient<$Result.GetResult<Prisma.$CategoriaEventoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one CategoriaEvento that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CategoriaEventoFindUniqueOrThrowArgs} args - Arguments to find a CategoriaEvento
     * @example
     * // Get one CategoriaEvento
     * const categoriaEvento = await prisma.categoriaEvento.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CategoriaEventoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoriaEventoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CategoriaEventoClient<$Result.GetResult<Prisma.$CategoriaEventoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first CategoriaEvento that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaEventoFindFirstArgs} args - Arguments to find a CategoriaEvento
     * @example
     * // Get one CategoriaEvento
     * const categoriaEvento = await prisma.categoriaEvento.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategoriaEventoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoriaEventoFindFirstArgs<ExtArgs>>
    ): Prisma__CategoriaEventoClient<$Result.GetResult<Prisma.$CategoriaEventoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first CategoriaEvento that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaEventoFindFirstOrThrowArgs} args - Arguments to find a CategoriaEvento
     * @example
     * // Get one CategoriaEvento
     * const categoriaEvento = await prisma.categoriaEvento.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CategoriaEventoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoriaEventoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CategoriaEventoClient<$Result.GetResult<Prisma.$CategoriaEventoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more CategoriaEventos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaEventoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CategoriaEventos
     * const categoriaEventos = await prisma.categoriaEvento.findMany()
     * 
     * // Get first 10 CategoriaEventos
     * const categoriaEventos = await prisma.categoriaEvento.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoriaEventoWithIdOnly = await prisma.categoriaEvento.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CategoriaEventoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoriaEventoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoriaEventoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a CategoriaEvento.
     * @param {CategoriaEventoCreateArgs} args - Arguments to create a CategoriaEvento.
     * @example
     * // Create one CategoriaEvento
     * const CategoriaEvento = await prisma.categoriaEvento.create({
     *   data: {
     *     // ... data to create a CategoriaEvento
     *   }
     * })
     * 
    **/
    create<T extends CategoriaEventoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CategoriaEventoCreateArgs<ExtArgs>>
    ): Prisma__CategoriaEventoClient<$Result.GetResult<Prisma.$CategoriaEventoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many CategoriaEventos.
     * @param {CategoriaEventoCreateManyArgs} args - Arguments to create many CategoriaEventos.
     * @example
     * // Create many CategoriaEventos
     * const categoriaEvento = await prisma.categoriaEvento.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends CategoriaEventoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoriaEventoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CategoriaEvento.
     * @param {CategoriaEventoDeleteArgs} args - Arguments to delete one CategoriaEvento.
     * @example
     * // Delete one CategoriaEvento
     * const CategoriaEvento = await prisma.categoriaEvento.delete({
     *   where: {
     *     // ... filter to delete one CategoriaEvento
     *   }
     * })
     * 
    **/
    delete<T extends CategoriaEventoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CategoriaEventoDeleteArgs<ExtArgs>>
    ): Prisma__CategoriaEventoClient<$Result.GetResult<Prisma.$CategoriaEventoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one CategoriaEvento.
     * @param {CategoriaEventoUpdateArgs} args - Arguments to update one CategoriaEvento.
     * @example
     * // Update one CategoriaEvento
     * const categoriaEvento = await prisma.categoriaEvento.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategoriaEventoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CategoriaEventoUpdateArgs<ExtArgs>>
    ): Prisma__CategoriaEventoClient<$Result.GetResult<Prisma.$CategoriaEventoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more CategoriaEventos.
     * @param {CategoriaEventoDeleteManyArgs} args - Arguments to filter CategoriaEventos to delete.
     * @example
     * // Delete a few CategoriaEventos
     * const { count } = await prisma.categoriaEvento.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategoriaEventoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoriaEventoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CategoriaEventos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaEventoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CategoriaEventos
     * const categoriaEvento = await prisma.categoriaEvento.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategoriaEventoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CategoriaEventoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CategoriaEvento.
     * @param {CategoriaEventoUpsertArgs} args - Arguments to update or create a CategoriaEvento.
     * @example
     * // Update or create a CategoriaEvento
     * const categoriaEvento = await prisma.categoriaEvento.upsert({
     *   create: {
     *     // ... data to create a CategoriaEvento
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CategoriaEvento we want to update
     *   }
     * })
    **/
    upsert<T extends CategoriaEventoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CategoriaEventoUpsertArgs<ExtArgs>>
    ): Prisma__CategoriaEventoClient<$Result.GetResult<Prisma.$CategoriaEventoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of CategoriaEventos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaEventoCountArgs} args - Arguments to filter CategoriaEventos to count.
     * @example
     * // Count the number of CategoriaEventos
     * const count = await prisma.categoriaEvento.count({
     *   where: {
     *     // ... the filter for the CategoriaEventos we want to count
     *   }
     * })
    **/
    count<T extends CategoriaEventoCountArgs>(
      args?: Subset<T, CategoriaEventoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoriaEventoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CategoriaEvento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaEventoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoriaEventoAggregateArgs>(args: Subset<T, CategoriaEventoAggregateArgs>): Prisma.PrismaPromise<GetCategoriaEventoAggregateType<T>>

    /**
     * Group by CategoriaEvento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaEventoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoriaEventoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoriaEventoGroupByArgs['orderBy'] }
        : { orderBy?: CategoriaEventoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoriaEventoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriaEventoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CategoriaEvento model
   */
  readonly fields: CategoriaEventoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CategoriaEvento.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoriaEventoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    eventos<T extends CategoriaEvento$eventosArgs<ExtArgs> = {}>(args?: Subset<T, CategoriaEvento$eventosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the CategoriaEvento model
   */ 
  interface CategoriaEventoFieldRefs {
    readonly id: FieldRef<"CategoriaEvento", 'Int'>
    readonly nome: FieldRef<"CategoriaEvento", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CategoriaEvento findUnique
   */
  export type CategoriaEventoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaEvento
     */
    select?: CategoriaEventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaEventoInclude<ExtArgs> | null
    /**
     * Filter, which CategoriaEvento to fetch.
     */
    where: CategoriaEventoWhereUniqueInput
  }

  /**
   * CategoriaEvento findUniqueOrThrow
   */
  export type CategoriaEventoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaEvento
     */
    select?: CategoriaEventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaEventoInclude<ExtArgs> | null
    /**
     * Filter, which CategoriaEvento to fetch.
     */
    where: CategoriaEventoWhereUniqueInput
  }

  /**
   * CategoriaEvento findFirst
   */
  export type CategoriaEventoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaEvento
     */
    select?: CategoriaEventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaEventoInclude<ExtArgs> | null
    /**
     * Filter, which CategoriaEvento to fetch.
     */
    where?: CategoriaEventoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoriaEventos to fetch.
     */
    orderBy?: CategoriaEventoOrderByWithRelationInput | CategoriaEventoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CategoriaEventos.
     */
    cursor?: CategoriaEventoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoriaEventos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoriaEventos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CategoriaEventos.
     */
    distinct?: CategoriaEventoScalarFieldEnum | CategoriaEventoScalarFieldEnum[]
  }

  /**
   * CategoriaEvento findFirstOrThrow
   */
  export type CategoriaEventoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaEvento
     */
    select?: CategoriaEventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaEventoInclude<ExtArgs> | null
    /**
     * Filter, which CategoriaEvento to fetch.
     */
    where?: CategoriaEventoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoriaEventos to fetch.
     */
    orderBy?: CategoriaEventoOrderByWithRelationInput | CategoriaEventoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CategoriaEventos.
     */
    cursor?: CategoriaEventoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoriaEventos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoriaEventos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CategoriaEventos.
     */
    distinct?: CategoriaEventoScalarFieldEnum | CategoriaEventoScalarFieldEnum[]
  }

  /**
   * CategoriaEvento findMany
   */
  export type CategoriaEventoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaEvento
     */
    select?: CategoriaEventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaEventoInclude<ExtArgs> | null
    /**
     * Filter, which CategoriaEventos to fetch.
     */
    where?: CategoriaEventoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoriaEventos to fetch.
     */
    orderBy?: CategoriaEventoOrderByWithRelationInput | CategoriaEventoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CategoriaEventos.
     */
    cursor?: CategoriaEventoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoriaEventos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoriaEventos.
     */
    skip?: number
    distinct?: CategoriaEventoScalarFieldEnum | CategoriaEventoScalarFieldEnum[]
  }

  /**
   * CategoriaEvento create
   */
  export type CategoriaEventoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaEvento
     */
    select?: CategoriaEventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaEventoInclude<ExtArgs> | null
    /**
     * The data needed to create a CategoriaEvento.
     */
    data: XOR<CategoriaEventoCreateInput, CategoriaEventoUncheckedCreateInput>
  }

  /**
   * CategoriaEvento createMany
   */
  export type CategoriaEventoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CategoriaEventos.
     */
    data: CategoriaEventoCreateManyInput | CategoriaEventoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CategoriaEvento update
   */
  export type CategoriaEventoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaEvento
     */
    select?: CategoriaEventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaEventoInclude<ExtArgs> | null
    /**
     * The data needed to update a CategoriaEvento.
     */
    data: XOR<CategoriaEventoUpdateInput, CategoriaEventoUncheckedUpdateInput>
    /**
     * Choose, which CategoriaEvento to update.
     */
    where: CategoriaEventoWhereUniqueInput
  }

  /**
   * CategoriaEvento updateMany
   */
  export type CategoriaEventoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CategoriaEventos.
     */
    data: XOR<CategoriaEventoUpdateManyMutationInput, CategoriaEventoUncheckedUpdateManyInput>
    /**
     * Filter which CategoriaEventos to update
     */
    where?: CategoriaEventoWhereInput
  }

  /**
   * CategoriaEvento upsert
   */
  export type CategoriaEventoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaEvento
     */
    select?: CategoriaEventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaEventoInclude<ExtArgs> | null
    /**
     * The filter to search for the CategoriaEvento to update in case it exists.
     */
    where: CategoriaEventoWhereUniqueInput
    /**
     * In case the CategoriaEvento found by the `where` argument doesn't exist, create a new CategoriaEvento with this data.
     */
    create: XOR<CategoriaEventoCreateInput, CategoriaEventoUncheckedCreateInput>
    /**
     * In case the CategoriaEvento was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoriaEventoUpdateInput, CategoriaEventoUncheckedUpdateInput>
  }

  /**
   * CategoriaEvento delete
   */
  export type CategoriaEventoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaEvento
     */
    select?: CategoriaEventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaEventoInclude<ExtArgs> | null
    /**
     * Filter which CategoriaEvento to delete.
     */
    where: CategoriaEventoWhereUniqueInput
  }

  /**
   * CategoriaEvento deleteMany
   */
  export type CategoriaEventoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CategoriaEventos to delete
     */
    where?: CategoriaEventoWhereInput
  }

  /**
   * CategoriaEvento.eventos
   */
  export type CategoriaEvento$eventosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Evento
     */
    select?: EventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventoInclude<ExtArgs> | null
    where?: EventoWhereInput
    orderBy?: EventoOrderByWithRelationInput | EventoOrderByWithRelationInput[]
    cursor?: EventoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventoScalarFieldEnum | EventoScalarFieldEnum[]
  }

  /**
   * CategoriaEvento without action
   */
  export type CategoriaEventoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaEvento
     */
    select?: CategoriaEventoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaEventoInclude<ExtArgs> | null
  }


  /**
   * Model Carrinho
   */

  export type AggregateCarrinho = {
    _count: CarrinhoCountAggregateOutputType | null
    _avg: CarrinhoAvgAggregateOutputType | null
    _sum: CarrinhoSumAggregateOutputType | null
    _min: CarrinhoMinAggregateOutputType | null
    _max: CarrinhoMaxAggregateOutputType | null
  }

  export type CarrinhoAvgAggregateOutputType = {
    id: number | null
    utilizadorId: number | null
  }

  export type CarrinhoSumAggregateOutputType = {
    id: number | null
    utilizadorId: number | null
  }

  export type CarrinhoMinAggregateOutputType = {
    id: number | null
    utilizadorId: number | null
  }

  export type CarrinhoMaxAggregateOutputType = {
    id: number | null
    utilizadorId: number | null
  }

  export type CarrinhoCountAggregateOutputType = {
    id: number
    utilizadorId: number
    _all: number
  }


  export type CarrinhoAvgAggregateInputType = {
    id?: true
    utilizadorId?: true
  }

  export type CarrinhoSumAggregateInputType = {
    id?: true
    utilizadorId?: true
  }

  export type CarrinhoMinAggregateInputType = {
    id?: true
    utilizadorId?: true
  }

  export type CarrinhoMaxAggregateInputType = {
    id?: true
    utilizadorId?: true
  }

  export type CarrinhoCountAggregateInputType = {
    id?: true
    utilizadorId?: true
    _all?: true
  }

  export type CarrinhoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Carrinho to aggregate.
     */
    where?: CarrinhoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carrinhos to fetch.
     */
    orderBy?: CarrinhoOrderByWithRelationInput | CarrinhoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CarrinhoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carrinhos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carrinhos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Carrinhos
    **/
    _count?: true | CarrinhoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CarrinhoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CarrinhoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CarrinhoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CarrinhoMaxAggregateInputType
  }

  export type GetCarrinhoAggregateType<T extends CarrinhoAggregateArgs> = {
        [P in keyof T & keyof AggregateCarrinho]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCarrinho[P]>
      : GetScalarType<T[P], AggregateCarrinho[P]>
  }




  export type CarrinhoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CarrinhoWhereInput
    orderBy?: CarrinhoOrderByWithAggregationInput | CarrinhoOrderByWithAggregationInput[]
    by: CarrinhoScalarFieldEnum[] | CarrinhoScalarFieldEnum
    having?: CarrinhoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CarrinhoCountAggregateInputType | true
    _avg?: CarrinhoAvgAggregateInputType
    _sum?: CarrinhoSumAggregateInputType
    _min?: CarrinhoMinAggregateInputType
    _max?: CarrinhoMaxAggregateInputType
  }

  export type CarrinhoGroupByOutputType = {
    id: number
    utilizadorId: number
    _count: CarrinhoCountAggregateOutputType | null
    _avg: CarrinhoAvgAggregateOutputType | null
    _sum: CarrinhoSumAggregateOutputType | null
    _min: CarrinhoMinAggregateOutputType | null
    _max: CarrinhoMaxAggregateOutputType | null
  }

  type GetCarrinhoGroupByPayload<T extends CarrinhoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CarrinhoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CarrinhoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CarrinhoGroupByOutputType[P]>
            : GetScalarType<T[P], CarrinhoGroupByOutputType[P]>
        }
      >
    >


  export type CarrinhoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    utilizadorId?: boolean
    utilizador?: boolean | UtilizadorDefaultArgs<ExtArgs>
    itens?: boolean | Carrinho$itensArgs<ExtArgs>
    _count?: boolean | CarrinhoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["carrinho"]>

  export type CarrinhoSelectScalar = {
    id?: boolean
    utilizadorId?: boolean
  }


  export type CarrinhoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    utilizador?: boolean | UtilizadorDefaultArgs<ExtArgs>
    itens?: boolean | Carrinho$itensArgs<ExtArgs>
    _count?: boolean | CarrinhoCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CarrinhoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Carrinho"
    objects: {
      utilizador: Prisma.$UtilizadorPayload<ExtArgs>
      itens: Prisma.$ItensCarrinhoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      utilizadorId: number
    }, ExtArgs["result"]["carrinho"]>
    composites: {}
  }


  type CarrinhoGetPayload<S extends boolean | null | undefined | CarrinhoDefaultArgs> = $Result.GetResult<Prisma.$CarrinhoPayload, S>

  type CarrinhoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CarrinhoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CarrinhoCountAggregateInputType | true
    }

  export interface CarrinhoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Carrinho'], meta: { name: 'Carrinho' } }
    /**
     * Find zero or one Carrinho that matches the filter.
     * @param {CarrinhoFindUniqueArgs} args - Arguments to find a Carrinho
     * @example
     * // Get one Carrinho
     * const carrinho = await prisma.carrinho.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CarrinhoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CarrinhoFindUniqueArgs<ExtArgs>>
    ): Prisma__CarrinhoClient<$Result.GetResult<Prisma.$CarrinhoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Carrinho that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CarrinhoFindUniqueOrThrowArgs} args - Arguments to find a Carrinho
     * @example
     * // Get one Carrinho
     * const carrinho = await prisma.carrinho.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CarrinhoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CarrinhoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CarrinhoClient<$Result.GetResult<Prisma.$CarrinhoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Carrinho that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarrinhoFindFirstArgs} args - Arguments to find a Carrinho
     * @example
     * // Get one Carrinho
     * const carrinho = await prisma.carrinho.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CarrinhoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CarrinhoFindFirstArgs<ExtArgs>>
    ): Prisma__CarrinhoClient<$Result.GetResult<Prisma.$CarrinhoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Carrinho that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarrinhoFindFirstOrThrowArgs} args - Arguments to find a Carrinho
     * @example
     * // Get one Carrinho
     * const carrinho = await prisma.carrinho.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CarrinhoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CarrinhoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CarrinhoClient<$Result.GetResult<Prisma.$CarrinhoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Carrinhos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarrinhoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Carrinhos
     * const carrinhos = await prisma.carrinho.findMany()
     * 
     * // Get first 10 Carrinhos
     * const carrinhos = await prisma.carrinho.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const carrinhoWithIdOnly = await prisma.carrinho.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CarrinhoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CarrinhoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CarrinhoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Carrinho.
     * @param {CarrinhoCreateArgs} args - Arguments to create a Carrinho.
     * @example
     * // Create one Carrinho
     * const Carrinho = await prisma.carrinho.create({
     *   data: {
     *     // ... data to create a Carrinho
     *   }
     * })
     * 
    **/
    create<T extends CarrinhoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CarrinhoCreateArgs<ExtArgs>>
    ): Prisma__CarrinhoClient<$Result.GetResult<Prisma.$CarrinhoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Carrinhos.
     * @param {CarrinhoCreateManyArgs} args - Arguments to create many Carrinhos.
     * @example
     * // Create many Carrinhos
     * const carrinho = await prisma.carrinho.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends CarrinhoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CarrinhoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Carrinho.
     * @param {CarrinhoDeleteArgs} args - Arguments to delete one Carrinho.
     * @example
     * // Delete one Carrinho
     * const Carrinho = await prisma.carrinho.delete({
     *   where: {
     *     // ... filter to delete one Carrinho
     *   }
     * })
     * 
    **/
    delete<T extends CarrinhoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CarrinhoDeleteArgs<ExtArgs>>
    ): Prisma__CarrinhoClient<$Result.GetResult<Prisma.$CarrinhoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Carrinho.
     * @param {CarrinhoUpdateArgs} args - Arguments to update one Carrinho.
     * @example
     * // Update one Carrinho
     * const carrinho = await prisma.carrinho.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CarrinhoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CarrinhoUpdateArgs<ExtArgs>>
    ): Prisma__CarrinhoClient<$Result.GetResult<Prisma.$CarrinhoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Carrinhos.
     * @param {CarrinhoDeleteManyArgs} args - Arguments to filter Carrinhos to delete.
     * @example
     * // Delete a few Carrinhos
     * const { count } = await prisma.carrinho.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CarrinhoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CarrinhoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Carrinhos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarrinhoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Carrinhos
     * const carrinho = await prisma.carrinho.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CarrinhoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CarrinhoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Carrinho.
     * @param {CarrinhoUpsertArgs} args - Arguments to update or create a Carrinho.
     * @example
     * // Update or create a Carrinho
     * const carrinho = await prisma.carrinho.upsert({
     *   create: {
     *     // ... data to create a Carrinho
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Carrinho we want to update
     *   }
     * })
    **/
    upsert<T extends CarrinhoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CarrinhoUpsertArgs<ExtArgs>>
    ): Prisma__CarrinhoClient<$Result.GetResult<Prisma.$CarrinhoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Carrinhos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarrinhoCountArgs} args - Arguments to filter Carrinhos to count.
     * @example
     * // Count the number of Carrinhos
     * const count = await prisma.carrinho.count({
     *   where: {
     *     // ... the filter for the Carrinhos we want to count
     *   }
     * })
    **/
    count<T extends CarrinhoCountArgs>(
      args?: Subset<T, CarrinhoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CarrinhoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Carrinho.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarrinhoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CarrinhoAggregateArgs>(args: Subset<T, CarrinhoAggregateArgs>): Prisma.PrismaPromise<GetCarrinhoAggregateType<T>>

    /**
     * Group by Carrinho.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarrinhoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CarrinhoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CarrinhoGroupByArgs['orderBy'] }
        : { orderBy?: CarrinhoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CarrinhoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCarrinhoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Carrinho model
   */
  readonly fields: CarrinhoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Carrinho.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CarrinhoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    utilizador<T extends UtilizadorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UtilizadorDefaultArgs<ExtArgs>>): Prisma__UtilizadorClient<$Result.GetResult<Prisma.$UtilizadorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    itens<T extends Carrinho$itensArgs<ExtArgs> = {}>(args?: Subset<T, Carrinho$itensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItensCarrinhoPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Carrinho model
   */ 
  interface CarrinhoFieldRefs {
    readonly id: FieldRef<"Carrinho", 'Int'>
    readonly utilizadorId: FieldRef<"Carrinho", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Carrinho findUnique
   */
  export type CarrinhoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrinho
     */
    select?: CarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarrinhoInclude<ExtArgs> | null
    /**
     * Filter, which Carrinho to fetch.
     */
    where: CarrinhoWhereUniqueInput
  }

  /**
   * Carrinho findUniqueOrThrow
   */
  export type CarrinhoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrinho
     */
    select?: CarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarrinhoInclude<ExtArgs> | null
    /**
     * Filter, which Carrinho to fetch.
     */
    where: CarrinhoWhereUniqueInput
  }

  /**
   * Carrinho findFirst
   */
  export type CarrinhoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrinho
     */
    select?: CarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarrinhoInclude<ExtArgs> | null
    /**
     * Filter, which Carrinho to fetch.
     */
    where?: CarrinhoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carrinhos to fetch.
     */
    orderBy?: CarrinhoOrderByWithRelationInput | CarrinhoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Carrinhos.
     */
    cursor?: CarrinhoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carrinhos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carrinhos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Carrinhos.
     */
    distinct?: CarrinhoScalarFieldEnum | CarrinhoScalarFieldEnum[]
  }

  /**
   * Carrinho findFirstOrThrow
   */
  export type CarrinhoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrinho
     */
    select?: CarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarrinhoInclude<ExtArgs> | null
    /**
     * Filter, which Carrinho to fetch.
     */
    where?: CarrinhoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carrinhos to fetch.
     */
    orderBy?: CarrinhoOrderByWithRelationInput | CarrinhoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Carrinhos.
     */
    cursor?: CarrinhoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carrinhos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carrinhos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Carrinhos.
     */
    distinct?: CarrinhoScalarFieldEnum | CarrinhoScalarFieldEnum[]
  }

  /**
   * Carrinho findMany
   */
  export type CarrinhoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrinho
     */
    select?: CarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarrinhoInclude<ExtArgs> | null
    /**
     * Filter, which Carrinhos to fetch.
     */
    where?: CarrinhoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carrinhos to fetch.
     */
    orderBy?: CarrinhoOrderByWithRelationInput | CarrinhoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Carrinhos.
     */
    cursor?: CarrinhoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carrinhos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carrinhos.
     */
    skip?: number
    distinct?: CarrinhoScalarFieldEnum | CarrinhoScalarFieldEnum[]
  }

  /**
   * Carrinho create
   */
  export type CarrinhoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrinho
     */
    select?: CarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarrinhoInclude<ExtArgs> | null
    /**
     * The data needed to create a Carrinho.
     */
    data: XOR<CarrinhoCreateInput, CarrinhoUncheckedCreateInput>
  }

  /**
   * Carrinho createMany
   */
  export type CarrinhoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Carrinhos.
     */
    data: CarrinhoCreateManyInput | CarrinhoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Carrinho update
   */
  export type CarrinhoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrinho
     */
    select?: CarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarrinhoInclude<ExtArgs> | null
    /**
     * The data needed to update a Carrinho.
     */
    data: XOR<CarrinhoUpdateInput, CarrinhoUncheckedUpdateInput>
    /**
     * Choose, which Carrinho to update.
     */
    where: CarrinhoWhereUniqueInput
  }

  /**
   * Carrinho updateMany
   */
  export type CarrinhoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Carrinhos.
     */
    data: XOR<CarrinhoUpdateManyMutationInput, CarrinhoUncheckedUpdateManyInput>
    /**
     * Filter which Carrinhos to update
     */
    where?: CarrinhoWhereInput
  }

  /**
   * Carrinho upsert
   */
  export type CarrinhoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrinho
     */
    select?: CarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarrinhoInclude<ExtArgs> | null
    /**
     * The filter to search for the Carrinho to update in case it exists.
     */
    where: CarrinhoWhereUniqueInput
    /**
     * In case the Carrinho found by the `where` argument doesn't exist, create a new Carrinho with this data.
     */
    create: XOR<CarrinhoCreateInput, CarrinhoUncheckedCreateInput>
    /**
     * In case the Carrinho was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CarrinhoUpdateInput, CarrinhoUncheckedUpdateInput>
  }

  /**
   * Carrinho delete
   */
  export type CarrinhoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrinho
     */
    select?: CarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarrinhoInclude<ExtArgs> | null
    /**
     * Filter which Carrinho to delete.
     */
    where: CarrinhoWhereUniqueInput
  }

  /**
   * Carrinho deleteMany
   */
  export type CarrinhoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Carrinhos to delete
     */
    where?: CarrinhoWhereInput
  }

  /**
   * Carrinho.itens
   */
  export type Carrinho$itensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItensCarrinho
     */
    select?: ItensCarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItensCarrinhoInclude<ExtArgs> | null
    where?: ItensCarrinhoWhereInput
    orderBy?: ItensCarrinhoOrderByWithRelationInput | ItensCarrinhoOrderByWithRelationInput[]
    cursor?: ItensCarrinhoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ItensCarrinhoScalarFieldEnum | ItensCarrinhoScalarFieldEnum[]
  }

  /**
   * Carrinho without action
   */
  export type CarrinhoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Carrinho
     */
    select?: CarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CarrinhoInclude<ExtArgs> | null
  }


  /**
   * Model ItensCarrinho
   */

  export type AggregateItensCarrinho = {
    _count: ItensCarrinhoCountAggregateOutputType | null
    _avg: ItensCarrinhoAvgAggregateOutputType | null
    _sum: ItensCarrinhoSumAggregateOutputType | null
    _min: ItensCarrinhoMinAggregateOutputType | null
    _max: ItensCarrinhoMaxAggregateOutputType | null
  }

  export type ItensCarrinhoAvgAggregateOutputType = {
    id: number | null
    carrinhoId: number | null
    eventoId: number | null
    quantidade: number | null
  }

  export type ItensCarrinhoSumAggregateOutputType = {
    id: number | null
    carrinhoId: number | null
    eventoId: number | null
    quantidade: number | null
  }

  export type ItensCarrinhoMinAggregateOutputType = {
    id: number | null
    carrinhoId: number | null
    eventoId: number | null
    quantidade: number | null
  }

  export type ItensCarrinhoMaxAggregateOutputType = {
    id: number | null
    carrinhoId: number | null
    eventoId: number | null
    quantidade: number | null
  }

  export type ItensCarrinhoCountAggregateOutputType = {
    id: number
    carrinhoId: number
    eventoId: number
    quantidade: number
    _all: number
  }


  export type ItensCarrinhoAvgAggregateInputType = {
    id?: true
    carrinhoId?: true
    eventoId?: true
    quantidade?: true
  }

  export type ItensCarrinhoSumAggregateInputType = {
    id?: true
    carrinhoId?: true
    eventoId?: true
    quantidade?: true
  }

  export type ItensCarrinhoMinAggregateInputType = {
    id?: true
    carrinhoId?: true
    eventoId?: true
    quantidade?: true
  }

  export type ItensCarrinhoMaxAggregateInputType = {
    id?: true
    carrinhoId?: true
    eventoId?: true
    quantidade?: true
  }

  export type ItensCarrinhoCountAggregateInputType = {
    id?: true
    carrinhoId?: true
    eventoId?: true
    quantidade?: true
    _all?: true
  }

  export type ItensCarrinhoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ItensCarrinho to aggregate.
     */
    where?: ItensCarrinhoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ItensCarrinhos to fetch.
     */
    orderBy?: ItensCarrinhoOrderByWithRelationInput | ItensCarrinhoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ItensCarrinhoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ItensCarrinhos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ItensCarrinhos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ItensCarrinhos
    **/
    _count?: true | ItensCarrinhoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ItensCarrinhoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ItensCarrinhoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ItensCarrinhoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ItensCarrinhoMaxAggregateInputType
  }

  export type GetItensCarrinhoAggregateType<T extends ItensCarrinhoAggregateArgs> = {
        [P in keyof T & keyof AggregateItensCarrinho]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateItensCarrinho[P]>
      : GetScalarType<T[P], AggregateItensCarrinho[P]>
  }




  export type ItensCarrinhoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ItensCarrinhoWhereInput
    orderBy?: ItensCarrinhoOrderByWithAggregationInput | ItensCarrinhoOrderByWithAggregationInput[]
    by: ItensCarrinhoScalarFieldEnum[] | ItensCarrinhoScalarFieldEnum
    having?: ItensCarrinhoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ItensCarrinhoCountAggregateInputType | true
    _avg?: ItensCarrinhoAvgAggregateInputType
    _sum?: ItensCarrinhoSumAggregateInputType
    _min?: ItensCarrinhoMinAggregateInputType
    _max?: ItensCarrinhoMaxAggregateInputType
  }

  export type ItensCarrinhoGroupByOutputType = {
    id: number
    carrinhoId: number
    eventoId: number
    quantidade: number
    _count: ItensCarrinhoCountAggregateOutputType | null
    _avg: ItensCarrinhoAvgAggregateOutputType | null
    _sum: ItensCarrinhoSumAggregateOutputType | null
    _min: ItensCarrinhoMinAggregateOutputType | null
    _max: ItensCarrinhoMaxAggregateOutputType | null
  }

  type GetItensCarrinhoGroupByPayload<T extends ItensCarrinhoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ItensCarrinhoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ItensCarrinhoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ItensCarrinhoGroupByOutputType[P]>
            : GetScalarType<T[P], ItensCarrinhoGroupByOutputType[P]>
        }
      >
    >


  export type ItensCarrinhoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    carrinhoId?: boolean
    eventoId?: boolean
    quantidade?: boolean
    carrinho?: boolean | CarrinhoDefaultArgs<ExtArgs>
    evento?: boolean | EventoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["itensCarrinho"]>

  export type ItensCarrinhoSelectScalar = {
    id?: boolean
    carrinhoId?: boolean
    eventoId?: boolean
    quantidade?: boolean
  }


  export type ItensCarrinhoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    carrinho?: boolean | CarrinhoDefaultArgs<ExtArgs>
    evento?: boolean | EventoDefaultArgs<ExtArgs>
  }


  export type $ItensCarrinhoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ItensCarrinho"
    objects: {
      carrinho: Prisma.$CarrinhoPayload<ExtArgs>
      evento: Prisma.$EventoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      carrinhoId: number
      eventoId: number
      quantidade: number
    }, ExtArgs["result"]["itensCarrinho"]>
    composites: {}
  }


  type ItensCarrinhoGetPayload<S extends boolean | null | undefined | ItensCarrinhoDefaultArgs> = $Result.GetResult<Prisma.$ItensCarrinhoPayload, S>

  type ItensCarrinhoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ItensCarrinhoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ItensCarrinhoCountAggregateInputType | true
    }

  export interface ItensCarrinhoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ItensCarrinho'], meta: { name: 'ItensCarrinho' } }
    /**
     * Find zero or one ItensCarrinho that matches the filter.
     * @param {ItensCarrinhoFindUniqueArgs} args - Arguments to find a ItensCarrinho
     * @example
     * // Get one ItensCarrinho
     * const itensCarrinho = await prisma.itensCarrinho.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ItensCarrinhoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ItensCarrinhoFindUniqueArgs<ExtArgs>>
    ): Prisma__ItensCarrinhoClient<$Result.GetResult<Prisma.$ItensCarrinhoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ItensCarrinho that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ItensCarrinhoFindUniqueOrThrowArgs} args - Arguments to find a ItensCarrinho
     * @example
     * // Get one ItensCarrinho
     * const itensCarrinho = await prisma.itensCarrinho.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ItensCarrinhoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ItensCarrinhoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ItensCarrinhoClient<$Result.GetResult<Prisma.$ItensCarrinhoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ItensCarrinho that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItensCarrinhoFindFirstArgs} args - Arguments to find a ItensCarrinho
     * @example
     * // Get one ItensCarrinho
     * const itensCarrinho = await prisma.itensCarrinho.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ItensCarrinhoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ItensCarrinhoFindFirstArgs<ExtArgs>>
    ): Prisma__ItensCarrinhoClient<$Result.GetResult<Prisma.$ItensCarrinhoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ItensCarrinho that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItensCarrinhoFindFirstOrThrowArgs} args - Arguments to find a ItensCarrinho
     * @example
     * // Get one ItensCarrinho
     * const itensCarrinho = await prisma.itensCarrinho.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ItensCarrinhoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ItensCarrinhoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ItensCarrinhoClient<$Result.GetResult<Prisma.$ItensCarrinhoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ItensCarrinhos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItensCarrinhoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ItensCarrinhos
     * const itensCarrinhos = await prisma.itensCarrinho.findMany()
     * 
     * // Get first 10 ItensCarrinhos
     * const itensCarrinhos = await prisma.itensCarrinho.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const itensCarrinhoWithIdOnly = await prisma.itensCarrinho.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ItensCarrinhoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ItensCarrinhoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ItensCarrinhoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ItensCarrinho.
     * @param {ItensCarrinhoCreateArgs} args - Arguments to create a ItensCarrinho.
     * @example
     * // Create one ItensCarrinho
     * const ItensCarrinho = await prisma.itensCarrinho.create({
     *   data: {
     *     // ... data to create a ItensCarrinho
     *   }
     * })
     * 
    **/
    create<T extends ItensCarrinhoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ItensCarrinhoCreateArgs<ExtArgs>>
    ): Prisma__ItensCarrinhoClient<$Result.GetResult<Prisma.$ItensCarrinhoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ItensCarrinhos.
     * @param {ItensCarrinhoCreateManyArgs} args - Arguments to create many ItensCarrinhos.
     * @example
     * // Create many ItensCarrinhos
     * const itensCarrinho = await prisma.itensCarrinho.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends ItensCarrinhoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ItensCarrinhoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ItensCarrinho.
     * @param {ItensCarrinhoDeleteArgs} args - Arguments to delete one ItensCarrinho.
     * @example
     * // Delete one ItensCarrinho
     * const ItensCarrinho = await prisma.itensCarrinho.delete({
     *   where: {
     *     // ... filter to delete one ItensCarrinho
     *   }
     * })
     * 
    **/
    delete<T extends ItensCarrinhoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ItensCarrinhoDeleteArgs<ExtArgs>>
    ): Prisma__ItensCarrinhoClient<$Result.GetResult<Prisma.$ItensCarrinhoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ItensCarrinho.
     * @param {ItensCarrinhoUpdateArgs} args - Arguments to update one ItensCarrinho.
     * @example
     * // Update one ItensCarrinho
     * const itensCarrinho = await prisma.itensCarrinho.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ItensCarrinhoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ItensCarrinhoUpdateArgs<ExtArgs>>
    ): Prisma__ItensCarrinhoClient<$Result.GetResult<Prisma.$ItensCarrinhoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ItensCarrinhos.
     * @param {ItensCarrinhoDeleteManyArgs} args - Arguments to filter ItensCarrinhos to delete.
     * @example
     * // Delete a few ItensCarrinhos
     * const { count } = await prisma.itensCarrinho.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ItensCarrinhoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ItensCarrinhoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ItensCarrinhos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItensCarrinhoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ItensCarrinhos
     * const itensCarrinho = await prisma.itensCarrinho.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ItensCarrinhoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ItensCarrinhoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ItensCarrinho.
     * @param {ItensCarrinhoUpsertArgs} args - Arguments to update or create a ItensCarrinho.
     * @example
     * // Update or create a ItensCarrinho
     * const itensCarrinho = await prisma.itensCarrinho.upsert({
     *   create: {
     *     // ... data to create a ItensCarrinho
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ItensCarrinho we want to update
     *   }
     * })
    **/
    upsert<T extends ItensCarrinhoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ItensCarrinhoUpsertArgs<ExtArgs>>
    ): Prisma__ItensCarrinhoClient<$Result.GetResult<Prisma.$ItensCarrinhoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ItensCarrinhos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItensCarrinhoCountArgs} args - Arguments to filter ItensCarrinhos to count.
     * @example
     * // Count the number of ItensCarrinhos
     * const count = await prisma.itensCarrinho.count({
     *   where: {
     *     // ... the filter for the ItensCarrinhos we want to count
     *   }
     * })
    **/
    count<T extends ItensCarrinhoCountArgs>(
      args?: Subset<T, ItensCarrinhoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ItensCarrinhoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ItensCarrinho.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItensCarrinhoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ItensCarrinhoAggregateArgs>(args: Subset<T, ItensCarrinhoAggregateArgs>): Prisma.PrismaPromise<GetItensCarrinhoAggregateType<T>>

    /**
     * Group by ItensCarrinho.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ItensCarrinhoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ItensCarrinhoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ItensCarrinhoGroupByArgs['orderBy'] }
        : { orderBy?: ItensCarrinhoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ItensCarrinhoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetItensCarrinhoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ItensCarrinho model
   */
  readonly fields: ItensCarrinhoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ItensCarrinho.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ItensCarrinhoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    carrinho<T extends CarrinhoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CarrinhoDefaultArgs<ExtArgs>>): Prisma__CarrinhoClient<$Result.GetResult<Prisma.$CarrinhoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    evento<T extends EventoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventoDefaultArgs<ExtArgs>>): Prisma__EventoClient<$Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ItensCarrinho model
   */ 
  interface ItensCarrinhoFieldRefs {
    readonly id: FieldRef<"ItensCarrinho", 'Int'>
    readonly carrinhoId: FieldRef<"ItensCarrinho", 'Int'>
    readonly eventoId: FieldRef<"ItensCarrinho", 'Int'>
    readonly quantidade: FieldRef<"ItensCarrinho", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ItensCarrinho findUnique
   */
  export type ItensCarrinhoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItensCarrinho
     */
    select?: ItensCarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItensCarrinhoInclude<ExtArgs> | null
    /**
     * Filter, which ItensCarrinho to fetch.
     */
    where: ItensCarrinhoWhereUniqueInput
  }

  /**
   * ItensCarrinho findUniqueOrThrow
   */
  export type ItensCarrinhoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItensCarrinho
     */
    select?: ItensCarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItensCarrinhoInclude<ExtArgs> | null
    /**
     * Filter, which ItensCarrinho to fetch.
     */
    where: ItensCarrinhoWhereUniqueInput
  }

  /**
   * ItensCarrinho findFirst
   */
  export type ItensCarrinhoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItensCarrinho
     */
    select?: ItensCarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItensCarrinhoInclude<ExtArgs> | null
    /**
     * Filter, which ItensCarrinho to fetch.
     */
    where?: ItensCarrinhoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ItensCarrinhos to fetch.
     */
    orderBy?: ItensCarrinhoOrderByWithRelationInput | ItensCarrinhoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ItensCarrinhos.
     */
    cursor?: ItensCarrinhoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ItensCarrinhos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ItensCarrinhos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ItensCarrinhos.
     */
    distinct?: ItensCarrinhoScalarFieldEnum | ItensCarrinhoScalarFieldEnum[]
  }

  /**
   * ItensCarrinho findFirstOrThrow
   */
  export type ItensCarrinhoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItensCarrinho
     */
    select?: ItensCarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItensCarrinhoInclude<ExtArgs> | null
    /**
     * Filter, which ItensCarrinho to fetch.
     */
    where?: ItensCarrinhoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ItensCarrinhos to fetch.
     */
    orderBy?: ItensCarrinhoOrderByWithRelationInput | ItensCarrinhoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ItensCarrinhos.
     */
    cursor?: ItensCarrinhoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ItensCarrinhos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ItensCarrinhos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ItensCarrinhos.
     */
    distinct?: ItensCarrinhoScalarFieldEnum | ItensCarrinhoScalarFieldEnum[]
  }

  /**
   * ItensCarrinho findMany
   */
  export type ItensCarrinhoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItensCarrinho
     */
    select?: ItensCarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItensCarrinhoInclude<ExtArgs> | null
    /**
     * Filter, which ItensCarrinhos to fetch.
     */
    where?: ItensCarrinhoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ItensCarrinhos to fetch.
     */
    orderBy?: ItensCarrinhoOrderByWithRelationInput | ItensCarrinhoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ItensCarrinhos.
     */
    cursor?: ItensCarrinhoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ItensCarrinhos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ItensCarrinhos.
     */
    skip?: number
    distinct?: ItensCarrinhoScalarFieldEnum | ItensCarrinhoScalarFieldEnum[]
  }

  /**
   * ItensCarrinho create
   */
  export type ItensCarrinhoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItensCarrinho
     */
    select?: ItensCarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItensCarrinhoInclude<ExtArgs> | null
    /**
     * The data needed to create a ItensCarrinho.
     */
    data: XOR<ItensCarrinhoCreateInput, ItensCarrinhoUncheckedCreateInput>
  }

  /**
   * ItensCarrinho createMany
   */
  export type ItensCarrinhoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ItensCarrinhos.
     */
    data: ItensCarrinhoCreateManyInput | ItensCarrinhoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ItensCarrinho update
   */
  export type ItensCarrinhoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItensCarrinho
     */
    select?: ItensCarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItensCarrinhoInclude<ExtArgs> | null
    /**
     * The data needed to update a ItensCarrinho.
     */
    data: XOR<ItensCarrinhoUpdateInput, ItensCarrinhoUncheckedUpdateInput>
    /**
     * Choose, which ItensCarrinho to update.
     */
    where: ItensCarrinhoWhereUniqueInput
  }

  /**
   * ItensCarrinho updateMany
   */
  export type ItensCarrinhoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ItensCarrinhos.
     */
    data: XOR<ItensCarrinhoUpdateManyMutationInput, ItensCarrinhoUncheckedUpdateManyInput>
    /**
     * Filter which ItensCarrinhos to update
     */
    where?: ItensCarrinhoWhereInput
  }

  /**
   * ItensCarrinho upsert
   */
  export type ItensCarrinhoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItensCarrinho
     */
    select?: ItensCarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItensCarrinhoInclude<ExtArgs> | null
    /**
     * The filter to search for the ItensCarrinho to update in case it exists.
     */
    where: ItensCarrinhoWhereUniqueInput
    /**
     * In case the ItensCarrinho found by the `where` argument doesn't exist, create a new ItensCarrinho with this data.
     */
    create: XOR<ItensCarrinhoCreateInput, ItensCarrinhoUncheckedCreateInput>
    /**
     * In case the ItensCarrinho was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ItensCarrinhoUpdateInput, ItensCarrinhoUncheckedUpdateInput>
  }

  /**
   * ItensCarrinho delete
   */
  export type ItensCarrinhoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItensCarrinho
     */
    select?: ItensCarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItensCarrinhoInclude<ExtArgs> | null
    /**
     * Filter which ItensCarrinho to delete.
     */
    where: ItensCarrinhoWhereUniqueInput
  }

  /**
   * ItensCarrinho deleteMany
   */
  export type ItensCarrinhoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ItensCarrinhos to delete
     */
    where?: ItensCarrinhoWhereInput
  }

  /**
   * ItensCarrinho without action
   */
  export type ItensCarrinhoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ItensCarrinho
     */
    select?: ItensCarrinhoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ItensCarrinhoInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UtilizadorScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    email: 'email',
    isAdmin: 'isAdmin',
    password: 'password',
    numtel: 'numtel'
  };

  export type UtilizadorScalarFieldEnum = (typeof UtilizadorScalarFieldEnum)[keyof typeof UtilizadorScalarFieldEnum]


  export const EventoScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    data: 'data',
    localizacao: 'localizacao',
    foto: 'foto',
    descricao: 'descricao',
    preco: 'preco',
    quantidade: 'quantidade',
    categoriaEventoId: 'categoriaEventoId'
  };

  export type EventoScalarFieldEnum = (typeof EventoScalarFieldEnum)[keyof typeof EventoScalarFieldEnum]


  export const CategoriaEventoScalarFieldEnum: {
    id: 'id',
    nome: 'nome'
  };

  export type CategoriaEventoScalarFieldEnum = (typeof CategoriaEventoScalarFieldEnum)[keyof typeof CategoriaEventoScalarFieldEnum]


  export const CarrinhoScalarFieldEnum: {
    id: 'id',
    utilizadorId: 'utilizadorId'
  };

  export type CarrinhoScalarFieldEnum = (typeof CarrinhoScalarFieldEnum)[keyof typeof CarrinhoScalarFieldEnum]


  export const ItensCarrinhoScalarFieldEnum: {
    id: 'id',
    carrinhoId: 'carrinhoId',
    eventoId: 'eventoId',
    quantidade: 'quantidade'
  };

  export type ItensCarrinhoScalarFieldEnum = (typeof ItensCarrinhoScalarFieldEnum)[keyof typeof ItensCarrinhoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UtilizadorWhereInput = {
    AND?: UtilizadorWhereInput | UtilizadorWhereInput[]
    OR?: UtilizadorWhereInput[]
    NOT?: UtilizadorWhereInput | UtilizadorWhereInput[]
    id?: IntFilter<"Utilizador"> | number
    nome?: StringFilter<"Utilizador"> | string
    email?: StringFilter<"Utilizador"> | string
    isAdmin?: BoolFilter<"Utilizador"> | boolean
    password?: StringFilter<"Utilizador"> | string
    numtel?: StringFilter<"Utilizador"> | string
    carrinhos?: CarrinhoListRelationFilter
  }

  export type UtilizadorOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    isAdmin?: SortOrder
    password?: SortOrder
    numtel?: SortOrder
    carrinhos?: CarrinhoOrderByRelationAggregateInput
  }

  export type UtilizadorWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UtilizadorWhereInput | UtilizadorWhereInput[]
    OR?: UtilizadorWhereInput[]
    NOT?: UtilizadorWhereInput | UtilizadorWhereInput[]
    nome?: StringFilter<"Utilizador"> | string
    isAdmin?: BoolFilter<"Utilizador"> | boolean
    password?: StringFilter<"Utilizador"> | string
    numtel?: StringFilter<"Utilizador"> | string
    carrinhos?: CarrinhoListRelationFilter
  }, "id" | "email">

  export type UtilizadorOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    isAdmin?: SortOrder
    password?: SortOrder
    numtel?: SortOrder
    _count?: UtilizadorCountOrderByAggregateInput
    _avg?: UtilizadorAvgOrderByAggregateInput
    _max?: UtilizadorMaxOrderByAggregateInput
    _min?: UtilizadorMinOrderByAggregateInput
    _sum?: UtilizadorSumOrderByAggregateInput
  }

  export type UtilizadorScalarWhereWithAggregatesInput = {
    AND?: UtilizadorScalarWhereWithAggregatesInput | UtilizadorScalarWhereWithAggregatesInput[]
    OR?: UtilizadorScalarWhereWithAggregatesInput[]
    NOT?: UtilizadorScalarWhereWithAggregatesInput | UtilizadorScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Utilizador"> | number
    nome?: StringWithAggregatesFilter<"Utilizador"> | string
    email?: StringWithAggregatesFilter<"Utilizador"> | string
    isAdmin?: BoolWithAggregatesFilter<"Utilizador"> | boolean
    password?: StringWithAggregatesFilter<"Utilizador"> | string
    numtel?: StringWithAggregatesFilter<"Utilizador"> | string
  }

  export type EventoWhereInput = {
    AND?: EventoWhereInput | EventoWhereInput[]
    OR?: EventoWhereInput[]
    NOT?: EventoWhereInput | EventoWhereInput[]
    id?: IntFilter<"Evento"> | number
    nome?: StringFilter<"Evento"> | string
    data?: DateTimeFilter<"Evento"> | Date | string
    localizacao?: StringFilter<"Evento"> | string
    foto?: StringFilter<"Evento"> | string
    descricao?: StringFilter<"Evento"> | string
    preco?: FloatFilter<"Evento"> | number
    quantidade?: IntFilter<"Evento"> | number
    categoriaEventoId?: IntFilter<"Evento"> | number
    categoria?: XOR<CategoriaEventoRelationFilter, CategoriaEventoWhereInput>
    itensCarrinho?: ItensCarrinhoListRelationFilter
  }

  export type EventoOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    data?: SortOrder
    localizacao?: SortOrder
    foto?: SortOrder
    descricao?: SortOrder
    preco?: SortOrder
    quantidade?: SortOrder
    categoriaEventoId?: SortOrder
    categoria?: CategoriaEventoOrderByWithRelationInput
    itensCarrinho?: ItensCarrinhoOrderByRelationAggregateInput
  }

  export type EventoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EventoWhereInput | EventoWhereInput[]
    OR?: EventoWhereInput[]
    NOT?: EventoWhereInput | EventoWhereInput[]
    nome?: StringFilter<"Evento"> | string
    data?: DateTimeFilter<"Evento"> | Date | string
    localizacao?: StringFilter<"Evento"> | string
    foto?: StringFilter<"Evento"> | string
    descricao?: StringFilter<"Evento"> | string
    preco?: FloatFilter<"Evento"> | number
    quantidade?: IntFilter<"Evento"> | number
    categoriaEventoId?: IntFilter<"Evento"> | number
    categoria?: XOR<CategoriaEventoRelationFilter, CategoriaEventoWhereInput>
    itensCarrinho?: ItensCarrinhoListRelationFilter
  }, "id">

  export type EventoOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    data?: SortOrder
    localizacao?: SortOrder
    foto?: SortOrder
    descricao?: SortOrder
    preco?: SortOrder
    quantidade?: SortOrder
    categoriaEventoId?: SortOrder
    _count?: EventoCountOrderByAggregateInput
    _avg?: EventoAvgOrderByAggregateInput
    _max?: EventoMaxOrderByAggregateInput
    _min?: EventoMinOrderByAggregateInput
    _sum?: EventoSumOrderByAggregateInput
  }

  export type EventoScalarWhereWithAggregatesInput = {
    AND?: EventoScalarWhereWithAggregatesInput | EventoScalarWhereWithAggregatesInput[]
    OR?: EventoScalarWhereWithAggregatesInput[]
    NOT?: EventoScalarWhereWithAggregatesInput | EventoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Evento"> | number
    nome?: StringWithAggregatesFilter<"Evento"> | string
    data?: DateTimeWithAggregatesFilter<"Evento"> | Date | string
    localizacao?: StringWithAggregatesFilter<"Evento"> | string
    foto?: StringWithAggregatesFilter<"Evento"> | string
    descricao?: StringWithAggregatesFilter<"Evento"> | string
    preco?: FloatWithAggregatesFilter<"Evento"> | number
    quantidade?: IntWithAggregatesFilter<"Evento"> | number
    categoriaEventoId?: IntWithAggregatesFilter<"Evento"> | number
  }

  export type CategoriaEventoWhereInput = {
    AND?: CategoriaEventoWhereInput | CategoriaEventoWhereInput[]
    OR?: CategoriaEventoWhereInput[]
    NOT?: CategoriaEventoWhereInput | CategoriaEventoWhereInput[]
    id?: IntFilter<"CategoriaEvento"> | number
    nome?: StringFilter<"CategoriaEvento"> | string
    eventos?: EventoListRelationFilter
  }

  export type CategoriaEventoOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    eventos?: EventoOrderByRelationAggregateInput
  }

  export type CategoriaEventoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CategoriaEventoWhereInput | CategoriaEventoWhereInput[]
    OR?: CategoriaEventoWhereInput[]
    NOT?: CategoriaEventoWhereInput | CategoriaEventoWhereInput[]
    nome?: StringFilter<"CategoriaEvento"> | string
    eventos?: EventoListRelationFilter
  }, "id">

  export type CategoriaEventoOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    _count?: CategoriaEventoCountOrderByAggregateInput
    _avg?: CategoriaEventoAvgOrderByAggregateInput
    _max?: CategoriaEventoMaxOrderByAggregateInput
    _min?: CategoriaEventoMinOrderByAggregateInput
    _sum?: CategoriaEventoSumOrderByAggregateInput
  }

  export type CategoriaEventoScalarWhereWithAggregatesInput = {
    AND?: CategoriaEventoScalarWhereWithAggregatesInput | CategoriaEventoScalarWhereWithAggregatesInput[]
    OR?: CategoriaEventoScalarWhereWithAggregatesInput[]
    NOT?: CategoriaEventoScalarWhereWithAggregatesInput | CategoriaEventoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CategoriaEvento"> | number
    nome?: StringWithAggregatesFilter<"CategoriaEvento"> | string
  }

  export type CarrinhoWhereInput = {
    AND?: CarrinhoWhereInput | CarrinhoWhereInput[]
    OR?: CarrinhoWhereInput[]
    NOT?: CarrinhoWhereInput | CarrinhoWhereInput[]
    id?: IntFilter<"Carrinho"> | number
    utilizadorId?: IntFilter<"Carrinho"> | number
    utilizador?: XOR<UtilizadorRelationFilter, UtilizadorWhereInput>
    itens?: ItensCarrinhoListRelationFilter
  }

  export type CarrinhoOrderByWithRelationInput = {
    id?: SortOrder
    utilizadorId?: SortOrder
    utilizador?: UtilizadorOrderByWithRelationInput
    itens?: ItensCarrinhoOrderByRelationAggregateInput
  }

  export type CarrinhoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CarrinhoWhereInput | CarrinhoWhereInput[]
    OR?: CarrinhoWhereInput[]
    NOT?: CarrinhoWhereInput | CarrinhoWhereInput[]
    utilizadorId?: IntFilter<"Carrinho"> | number
    utilizador?: XOR<UtilizadorRelationFilter, UtilizadorWhereInput>
    itens?: ItensCarrinhoListRelationFilter
  }, "id">

  export type CarrinhoOrderByWithAggregationInput = {
    id?: SortOrder
    utilizadorId?: SortOrder
    _count?: CarrinhoCountOrderByAggregateInput
    _avg?: CarrinhoAvgOrderByAggregateInput
    _max?: CarrinhoMaxOrderByAggregateInput
    _min?: CarrinhoMinOrderByAggregateInput
    _sum?: CarrinhoSumOrderByAggregateInput
  }

  export type CarrinhoScalarWhereWithAggregatesInput = {
    AND?: CarrinhoScalarWhereWithAggregatesInput | CarrinhoScalarWhereWithAggregatesInput[]
    OR?: CarrinhoScalarWhereWithAggregatesInput[]
    NOT?: CarrinhoScalarWhereWithAggregatesInput | CarrinhoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Carrinho"> | number
    utilizadorId?: IntWithAggregatesFilter<"Carrinho"> | number
  }

  export type ItensCarrinhoWhereInput = {
    AND?: ItensCarrinhoWhereInput | ItensCarrinhoWhereInput[]
    OR?: ItensCarrinhoWhereInput[]
    NOT?: ItensCarrinhoWhereInput | ItensCarrinhoWhereInput[]
    id?: IntFilter<"ItensCarrinho"> | number
    carrinhoId?: IntFilter<"ItensCarrinho"> | number
    eventoId?: IntFilter<"ItensCarrinho"> | number
    quantidade?: IntFilter<"ItensCarrinho"> | number
    carrinho?: XOR<CarrinhoRelationFilter, CarrinhoWhereInput>
    evento?: XOR<EventoRelationFilter, EventoWhereInput>
  }

  export type ItensCarrinhoOrderByWithRelationInput = {
    id?: SortOrder
    carrinhoId?: SortOrder
    eventoId?: SortOrder
    quantidade?: SortOrder
    carrinho?: CarrinhoOrderByWithRelationInput
    evento?: EventoOrderByWithRelationInput
  }

  export type ItensCarrinhoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ItensCarrinhoWhereInput | ItensCarrinhoWhereInput[]
    OR?: ItensCarrinhoWhereInput[]
    NOT?: ItensCarrinhoWhereInput | ItensCarrinhoWhereInput[]
    carrinhoId?: IntFilter<"ItensCarrinho"> | number
    eventoId?: IntFilter<"ItensCarrinho"> | number
    quantidade?: IntFilter<"ItensCarrinho"> | number
    carrinho?: XOR<CarrinhoRelationFilter, CarrinhoWhereInput>
    evento?: XOR<EventoRelationFilter, EventoWhereInput>
  }, "id">

  export type ItensCarrinhoOrderByWithAggregationInput = {
    id?: SortOrder
    carrinhoId?: SortOrder
    eventoId?: SortOrder
    quantidade?: SortOrder
    _count?: ItensCarrinhoCountOrderByAggregateInput
    _avg?: ItensCarrinhoAvgOrderByAggregateInput
    _max?: ItensCarrinhoMaxOrderByAggregateInput
    _min?: ItensCarrinhoMinOrderByAggregateInput
    _sum?: ItensCarrinhoSumOrderByAggregateInput
  }

  export type ItensCarrinhoScalarWhereWithAggregatesInput = {
    AND?: ItensCarrinhoScalarWhereWithAggregatesInput | ItensCarrinhoScalarWhereWithAggregatesInput[]
    OR?: ItensCarrinhoScalarWhereWithAggregatesInput[]
    NOT?: ItensCarrinhoScalarWhereWithAggregatesInput | ItensCarrinhoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ItensCarrinho"> | number
    carrinhoId?: IntWithAggregatesFilter<"ItensCarrinho"> | number
    eventoId?: IntWithAggregatesFilter<"ItensCarrinho"> | number
    quantidade?: IntWithAggregatesFilter<"ItensCarrinho"> | number
  }

  export type UtilizadorCreateInput = {
    nome: string
    email: string
    isAdmin?: boolean
    password: string
    numtel: string
    carrinhos?: CarrinhoCreateNestedManyWithoutUtilizadorInput
  }

  export type UtilizadorUncheckedCreateInput = {
    id?: number
    nome: string
    email: string
    isAdmin?: boolean
    password: string
    numtel: string
    carrinhos?: CarrinhoUncheckedCreateNestedManyWithoutUtilizadorInput
  }

  export type UtilizadorUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    password?: StringFieldUpdateOperationsInput | string
    numtel?: StringFieldUpdateOperationsInput | string
    carrinhos?: CarrinhoUpdateManyWithoutUtilizadorNestedInput
  }

  export type UtilizadorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    password?: StringFieldUpdateOperationsInput | string
    numtel?: StringFieldUpdateOperationsInput | string
    carrinhos?: CarrinhoUncheckedUpdateManyWithoutUtilizadorNestedInput
  }

  export type UtilizadorCreateManyInput = {
    id?: number
    nome: string
    email: string
    isAdmin?: boolean
    password: string
    numtel: string
  }

  export type UtilizadorUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    password?: StringFieldUpdateOperationsInput | string
    numtel?: StringFieldUpdateOperationsInput | string
  }

  export type UtilizadorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    password?: StringFieldUpdateOperationsInput | string
    numtel?: StringFieldUpdateOperationsInput | string
  }

  export type EventoCreateInput = {
    nome: string
    data: Date | string
    localizacao: string
    foto: string
    descricao: string
    preco: number
    quantidade: number
    categoria: CategoriaEventoCreateNestedOneWithoutEventosInput
    itensCarrinho?: ItensCarrinhoCreateNestedManyWithoutEventoInput
  }

  export type EventoUncheckedCreateInput = {
    id?: number
    nome: string
    data: Date | string
    localizacao: string
    foto: string
    descricao: string
    preco: number
    quantidade: number
    categoriaEventoId: number
    itensCarrinho?: ItensCarrinhoUncheckedCreateNestedManyWithoutEventoInput
  }

  export type EventoUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    localizacao?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    categoria?: CategoriaEventoUpdateOneRequiredWithoutEventosNestedInput
    itensCarrinho?: ItensCarrinhoUpdateManyWithoutEventoNestedInput
  }

  export type EventoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    localizacao?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    categoriaEventoId?: IntFieldUpdateOperationsInput | number
    itensCarrinho?: ItensCarrinhoUncheckedUpdateManyWithoutEventoNestedInput
  }

  export type EventoCreateManyInput = {
    id?: number
    nome: string
    data: Date | string
    localizacao: string
    foto: string
    descricao: string
    preco: number
    quantidade: number
    categoriaEventoId: number
  }

  export type EventoUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    localizacao?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type EventoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    localizacao?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    categoriaEventoId?: IntFieldUpdateOperationsInput | number
  }

  export type CategoriaEventoCreateInput = {
    nome: string
    eventos?: EventoCreateNestedManyWithoutCategoriaInput
  }

  export type CategoriaEventoUncheckedCreateInput = {
    id?: number
    nome: string
    eventos?: EventoUncheckedCreateNestedManyWithoutCategoriaInput
  }

  export type CategoriaEventoUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    eventos?: EventoUpdateManyWithoutCategoriaNestedInput
  }

  export type CategoriaEventoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    eventos?: EventoUncheckedUpdateManyWithoutCategoriaNestedInput
  }

  export type CategoriaEventoCreateManyInput = {
    id?: number
    nome: string
  }

  export type CategoriaEventoUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type CategoriaEventoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type CarrinhoCreateInput = {
    utilizador: UtilizadorCreateNestedOneWithoutCarrinhosInput
    itens?: ItensCarrinhoCreateNestedManyWithoutCarrinhoInput
  }

  export type CarrinhoUncheckedCreateInput = {
    id?: number
    utilizadorId: number
    itens?: ItensCarrinhoUncheckedCreateNestedManyWithoutCarrinhoInput
  }

  export type CarrinhoUpdateInput = {
    utilizador?: UtilizadorUpdateOneRequiredWithoutCarrinhosNestedInput
    itens?: ItensCarrinhoUpdateManyWithoutCarrinhoNestedInput
  }

  export type CarrinhoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    utilizadorId?: IntFieldUpdateOperationsInput | number
    itens?: ItensCarrinhoUncheckedUpdateManyWithoutCarrinhoNestedInput
  }

  export type CarrinhoCreateManyInput = {
    id?: number
    utilizadorId: number
  }

  export type CarrinhoUpdateManyMutationInput = {

  }

  export type CarrinhoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    utilizadorId?: IntFieldUpdateOperationsInput | number
  }

  export type ItensCarrinhoCreateInput = {
    quantidade: number
    carrinho: CarrinhoCreateNestedOneWithoutItensInput
    evento: EventoCreateNestedOneWithoutItensCarrinhoInput
  }

  export type ItensCarrinhoUncheckedCreateInput = {
    id?: number
    carrinhoId: number
    eventoId: number
    quantidade: number
  }

  export type ItensCarrinhoUpdateInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
    carrinho?: CarrinhoUpdateOneRequiredWithoutItensNestedInput
    evento?: EventoUpdateOneRequiredWithoutItensCarrinhoNestedInput
  }

  export type ItensCarrinhoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    carrinhoId?: IntFieldUpdateOperationsInput | number
    eventoId?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type ItensCarrinhoCreateManyInput = {
    id?: number
    carrinhoId: number
    eventoId: number
    quantidade: number
  }

  export type ItensCarrinhoUpdateManyMutationInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type ItensCarrinhoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    carrinhoId?: IntFieldUpdateOperationsInput | number
    eventoId?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type CarrinhoListRelationFilter = {
    every?: CarrinhoWhereInput
    some?: CarrinhoWhereInput
    none?: CarrinhoWhereInput
  }

  export type CarrinhoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UtilizadorCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    isAdmin?: SortOrder
    password?: SortOrder
    numtel?: SortOrder
  }

  export type UtilizadorAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UtilizadorMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    isAdmin?: SortOrder
    password?: SortOrder
    numtel?: SortOrder
  }

  export type UtilizadorMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    isAdmin?: SortOrder
    password?: SortOrder
    numtel?: SortOrder
  }

  export type UtilizadorSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type CategoriaEventoRelationFilter = {
    is?: CategoriaEventoWhereInput
    isNot?: CategoriaEventoWhereInput
  }

  export type ItensCarrinhoListRelationFilter = {
    every?: ItensCarrinhoWhereInput
    some?: ItensCarrinhoWhereInput
    none?: ItensCarrinhoWhereInput
  }

  export type ItensCarrinhoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventoCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    data?: SortOrder
    localizacao?: SortOrder
    foto?: SortOrder
    descricao?: SortOrder
    preco?: SortOrder
    quantidade?: SortOrder
    categoriaEventoId?: SortOrder
  }

  export type EventoAvgOrderByAggregateInput = {
    id?: SortOrder
    preco?: SortOrder
    quantidade?: SortOrder
    categoriaEventoId?: SortOrder
  }

  export type EventoMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    data?: SortOrder
    localizacao?: SortOrder
    foto?: SortOrder
    descricao?: SortOrder
    preco?: SortOrder
    quantidade?: SortOrder
    categoriaEventoId?: SortOrder
  }

  export type EventoMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    data?: SortOrder
    localizacao?: SortOrder
    foto?: SortOrder
    descricao?: SortOrder
    preco?: SortOrder
    quantidade?: SortOrder
    categoriaEventoId?: SortOrder
  }

  export type EventoSumOrderByAggregateInput = {
    id?: SortOrder
    preco?: SortOrder
    quantidade?: SortOrder
    categoriaEventoId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EventoListRelationFilter = {
    every?: EventoWhereInput
    some?: EventoWhereInput
    none?: EventoWhereInput
  }

  export type EventoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoriaEventoCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type CategoriaEventoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CategoriaEventoMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type CategoriaEventoMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type CategoriaEventoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UtilizadorRelationFilter = {
    is?: UtilizadorWhereInput
    isNot?: UtilizadorWhereInput
  }

  export type CarrinhoCountOrderByAggregateInput = {
    id?: SortOrder
    utilizadorId?: SortOrder
  }

  export type CarrinhoAvgOrderByAggregateInput = {
    id?: SortOrder
    utilizadorId?: SortOrder
  }

  export type CarrinhoMaxOrderByAggregateInput = {
    id?: SortOrder
    utilizadorId?: SortOrder
  }

  export type CarrinhoMinOrderByAggregateInput = {
    id?: SortOrder
    utilizadorId?: SortOrder
  }

  export type CarrinhoSumOrderByAggregateInput = {
    id?: SortOrder
    utilizadorId?: SortOrder
  }

  export type CarrinhoRelationFilter = {
    is?: CarrinhoWhereInput
    isNot?: CarrinhoWhereInput
  }

  export type EventoRelationFilter = {
    is?: EventoWhereInput
    isNot?: EventoWhereInput
  }

  export type ItensCarrinhoCountOrderByAggregateInput = {
    id?: SortOrder
    carrinhoId?: SortOrder
    eventoId?: SortOrder
    quantidade?: SortOrder
  }

  export type ItensCarrinhoAvgOrderByAggregateInput = {
    id?: SortOrder
    carrinhoId?: SortOrder
    eventoId?: SortOrder
    quantidade?: SortOrder
  }

  export type ItensCarrinhoMaxOrderByAggregateInput = {
    id?: SortOrder
    carrinhoId?: SortOrder
    eventoId?: SortOrder
    quantidade?: SortOrder
  }

  export type ItensCarrinhoMinOrderByAggregateInput = {
    id?: SortOrder
    carrinhoId?: SortOrder
    eventoId?: SortOrder
    quantidade?: SortOrder
  }

  export type ItensCarrinhoSumOrderByAggregateInput = {
    id?: SortOrder
    carrinhoId?: SortOrder
    eventoId?: SortOrder
    quantidade?: SortOrder
  }

  export type CarrinhoCreateNestedManyWithoutUtilizadorInput = {
    create?: XOR<CarrinhoCreateWithoutUtilizadorInput, CarrinhoUncheckedCreateWithoutUtilizadorInput> | CarrinhoCreateWithoutUtilizadorInput[] | CarrinhoUncheckedCreateWithoutUtilizadorInput[]
    connectOrCreate?: CarrinhoCreateOrConnectWithoutUtilizadorInput | CarrinhoCreateOrConnectWithoutUtilizadorInput[]
    createMany?: CarrinhoCreateManyUtilizadorInputEnvelope
    connect?: CarrinhoWhereUniqueInput | CarrinhoWhereUniqueInput[]
  }

  export type CarrinhoUncheckedCreateNestedManyWithoutUtilizadorInput = {
    create?: XOR<CarrinhoCreateWithoutUtilizadorInput, CarrinhoUncheckedCreateWithoutUtilizadorInput> | CarrinhoCreateWithoutUtilizadorInput[] | CarrinhoUncheckedCreateWithoutUtilizadorInput[]
    connectOrCreate?: CarrinhoCreateOrConnectWithoutUtilizadorInput | CarrinhoCreateOrConnectWithoutUtilizadorInput[]
    createMany?: CarrinhoCreateManyUtilizadorInputEnvelope
    connect?: CarrinhoWhereUniqueInput | CarrinhoWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type CarrinhoUpdateManyWithoutUtilizadorNestedInput = {
    create?: XOR<CarrinhoCreateWithoutUtilizadorInput, CarrinhoUncheckedCreateWithoutUtilizadorInput> | CarrinhoCreateWithoutUtilizadorInput[] | CarrinhoUncheckedCreateWithoutUtilizadorInput[]
    connectOrCreate?: CarrinhoCreateOrConnectWithoutUtilizadorInput | CarrinhoCreateOrConnectWithoutUtilizadorInput[]
    upsert?: CarrinhoUpsertWithWhereUniqueWithoutUtilizadorInput | CarrinhoUpsertWithWhereUniqueWithoutUtilizadorInput[]
    createMany?: CarrinhoCreateManyUtilizadorInputEnvelope
    set?: CarrinhoWhereUniqueInput | CarrinhoWhereUniqueInput[]
    disconnect?: CarrinhoWhereUniqueInput | CarrinhoWhereUniqueInput[]
    delete?: CarrinhoWhereUniqueInput | CarrinhoWhereUniqueInput[]
    connect?: CarrinhoWhereUniqueInput | CarrinhoWhereUniqueInput[]
    update?: CarrinhoUpdateWithWhereUniqueWithoutUtilizadorInput | CarrinhoUpdateWithWhereUniqueWithoutUtilizadorInput[]
    updateMany?: CarrinhoUpdateManyWithWhereWithoutUtilizadorInput | CarrinhoUpdateManyWithWhereWithoutUtilizadorInput[]
    deleteMany?: CarrinhoScalarWhereInput | CarrinhoScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CarrinhoUncheckedUpdateManyWithoutUtilizadorNestedInput = {
    create?: XOR<CarrinhoCreateWithoutUtilizadorInput, CarrinhoUncheckedCreateWithoutUtilizadorInput> | CarrinhoCreateWithoutUtilizadorInput[] | CarrinhoUncheckedCreateWithoutUtilizadorInput[]
    connectOrCreate?: CarrinhoCreateOrConnectWithoutUtilizadorInput | CarrinhoCreateOrConnectWithoutUtilizadorInput[]
    upsert?: CarrinhoUpsertWithWhereUniqueWithoutUtilizadorInput | CarrinhoUpsertWithWhereUniqueWithoutUtilizadorInput[]
    createMany?: CarrinhoCreateManyUtilizadorInputEnvelope
    set?: CarrinhoWhereUniqueInput | CarrinhoWhereUniqueInput[]
    disconnect?: CarrinhoWhereUniqueInput | CarrinhoWhereUniqueInput[]
    delete?: CarrinhoWhereUniqueInput | CarrinhoWhereUniqueInput[]
    connect?: CarrinhoWhereUniqueInput | CarrinhoWhereUniqueInput[]
    update?: CarrinhoUpdateWithWhereUniqueWithoutUtilizadorInput | CarrinhoUpdateWithWhereUniqueWithoutUtilizadorInput[]
    updateMany?: CarrinhoUpdateManyWithWhereWithoutUtilizadorInput | CarrinhoUpdateManyWithWhereWithoutUtilizadorInput[]
    deleteMany?: CarrinhoScalarWhereInput | CarrinhoScalarWhereInput[]
  }

  export type CategoriaEventoCreateNestedOneWithoutEventosInput = {
    create?: XOR<CategoriaEventoCreateWithoutEventosInput, CategoriaEventoUncheckedCreateWithoutEventosInput>
    connectOrCreate?: CategoriaEventoCreateOrConnectWithoutEventosInput
    connect?: CategoriaEventoWhereUniqueInput
  }

  export type ItensCarrinhoCreateNestedManyWithoutEventoInput = {
    create?: XOR<ItensCarrinhoCreateWithoutEventoInput, ItensCarrinhoUncheckedCreateWithoutEventoInput> | ItensCarrinhoCreateWithoutEventoInput[] | ItensCarrinhoUncheckedCreateWithoutEventoInput[]
    connectOrCreate?: ItensCarrinhoCreateOrConnectWithoutEventoInput | ItensCarrinhoCreateOrConnectWithoutEventoInput[]
    createMany?: ItensCarrinhoCreateManyEventoInputEnvelope
    connect?: ItensCarrinhoWhereUniqueInput | ItensCarrinhoWhereUniqueInput[]
  }

  export type ItensCarrinhoUncheckedCreateNestedManyWithoutEventoInput = {
    create?: XOR<ItensCarrinhoCreateWithoutEventoInput, ItensCarrinhoUncheckedCreateWithoutEventoInput> | ItensCarrinhoCreateWithoutEventoInput[] | ItensCarrinhoUncheckedCreateWithoutEventoInput[]
    connectOrCreate?: ItensCarrinhoCreateOrConnectWithoutEventoInput | ItensCarrinhoCreateOrConnectWithoutEventoInput[]
    createMany?: ItensCarrinhoCreateManyEventoInputEnvelope
    connect?: ItensCarrinhoWhereUniqueInput | ItensCarrinhoWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CategoriaEventoUpdateOneRequiredWithoutEventosNestedInput = {
    create?: XOR<CategoriaEventoCreateWithoutEventosInput, CategoriaEventoUncheckedCreateWithoutEventosInput>
    connectOrCreate?: CategoriaEventoCreateOrConnectWithoutEventosInput
    upsert?: CategoriaEventoUpsertWithoutEventosInput
    connect?: CategoriaEventoWhereUniqueInput
    update?: XOR<XOR<CategoriaEventoUpdateToOneWithWhereWithoutEventosInput, CategoriaEventoUpdateWithoutEventosInput>, CategoriaEventoUncheckedUpdateWithoutEventosInput>
  }

  export type ItensCarrinhoUpdateManyWithoutEventoNestedInput = {
    create?: XOR<ItensCarrinhoCreateWithoutEventoInput, ItensCarrinhoUncheckedCreateWithoutEventoInput> | ItensCarrinhoCreateWithoutEventoInput[] | ItensCarrinhoUncheckedCreateWithoutEventoInput[]
    connectOrCreate?: ItensCarrinhoCreateOrConnectWithoutEventoInput | ItensCarrinhoCreateOrConnectWithoutEventoInput[]
    upsert?: ItensCarrinhoUpsertWithWhereUniqueWithoutEventoInput | ItensCarrinhoUpsertWithWhereUniqueWithoutEventoInput[]
    createMany?: ItensCarrinhoCreateManyEventoInputEnvelope
    set?: ItensCarrinhoWhereUniqueInput | ItensCarrinhoWhereUniqueInput[]
    disconnect?: ItensCarrinhoWhereUniqueInput | ItensCarrinhoWhereUniqueInput[]
    delete?: ItensCarrinhoWhereUniqueInput | ItensCarrinhoWhereUniqueInput[]
    connect?: ItensCarrinhoWhereUniqueInput | ItensCarrinhoWhereUniqueInput[]
    update?: ItensCarrinhoUpdateWithWhereUniqueWithoutEventoInput | ItensCarrinhoUpdateWithWhereUniqueWithoutEventoInput[]
    updateMany?: ItensCarrinhoUpdateManyWithWhereWithoutEventoInput | ItensCarrinhoUpdateManyWithWhereWithoutEventoInput[]
    deleteMany?: ItensCarrinhoScalarWhereInput | ItensCarrinhoScalarWhereInput[]
  }

  export type ItensCarrinhoUncheckedUpdateManyWithoutEventoNestedInput = {
    create?: XOR<ItensCarrinhoCreateWithoutEventoInput, ItensCarrinhoUncheckedCreateWithoutEventoInput> | ItensCarrinhoCreateWithoutEventoInput[] | ItensCarrinhoUncheckedCreateWithoutEventoInput[]
    connectOrCreate?: ItensCarrinhoCreateOrConnectWithoutEventoInput | ItensCarrinhoCreateOrConnectWithoutEventoInput[]
    upsert?: ItensCarrinhoUpsertWithWhereUniqueWithoutEventoInput | ItensCarrinhoUpsertWithWhereUniqueWithoutEventoInput[]
    createMany?: ItensCarrinhoCreateManyEventoInputEnvelope
    set?: ItensCarrinhoWhereUniqueInput | ItensCarrinhoWhereUniqueInput[]
    disconnect?: ItensCarrinhoWhereUniqueInput | ItensCarrinhoWhereUniqueInput[]
    delete?: ItensCarrinhoWhereUniqueInput | ItensCarrinhoWhereUniqueInput[]
    connect?: ItensCarrinhoWhereUniqueInput | ItensCarrinhoWhereUniqueInput[]
    update?: ItensCarrinhoUpdateWithWhereUniqueWithoutEventoInput | ItensCarrinhoUpdateWithWhereUniqueWithoutEventoInput[]
    updateMany?: ItensCarrinhoUpdateManyWithWhereWithoutEventoInput | ItensCarrinhoUpdateManyWithWhereWithoutEventoInput[]
    deleteMany?: ItensCarrinhoScalarWhereInput | ItensCarrinhoScalarWhereInput[]
  }

  export type EventoCreateNestedManyWithoutCategoriaInput = {
    create?: XOR<EventoCreateWithoutCategoriaInput, EventoUncheckedCreateWithoutCategoriaInput> | EventoCreateWithoutCategoriaInput[] | EventoUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: EventoCreateOrConnectWithoutCategoriaInput | EventoCreateOrConnectWithoutCategoriaInput[]
    createMany?: EventoCreateManyCategoriaInputEnvelope
    connect?: EventoWhereUniqueInput | EventoWhereUniqueInput[]
  }

  export type EventoUncheckedCreateNestedManyWithoutCategoriaInput = {
    create?: XOR<EventoCreateWithoutCategoriaInput, EventoUncheckedCreateWithoutCategoriaInput> | EventoCreateWithoutCategoriaInput[] | EventoUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: EventoCreateOrConnectWithoutCategoriaInput | EventoCreateOrConnectWithoutCategoriaInput[]
    createMany?: EventoCreateManyCategoriaInputEnvelope
    connect?: EventoWhereUniqueInput | EventoWhereUniqueInput[]
  }

  export type EventoUpdateManyWithoutCategoriaNestedInput = {
    create?: XOR<EventoCreateWithoutCategoriaInput, EventoUncheckedCreateWithoutCategoriaInput> | EventoCreateWithoutCategoriaInput[] | EventoUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: EventoCreateOrConnectWithoutCategoriaInput | EventoCreateOrConnectWithoutCategoriaInput[]
    upsert?: EventoUpsertWithWhereUniqueWithoutCategoriaInput | EventoUpsertWithWhereUniqueWithoutCategoriaInput[]
    createMany?: EventoCreateManyCategoriaInputEnvelope
    set?: EventoWhereUniqueInput | EventoWhereUniqueInput[]
    disconnect?: EventoWhereUniqueInput | EventoWhereUniqueInput[]
    delete?: EventoWhereUniqueInput | EventoWhereUniqueInput[]
    connect?: EventoWhereUniqueInput | EventoWhereUniqueInput[]
    update?: EventoUpdateWithWhereUniqueWithoutCategoriaInput | EventoUpdateWithWhereUniqueWithoutCategoriaInput[]
    updateMany?: EventoUpdateManyWithWhereWithoutCategoriaInput | EventoUpdateManyWithWhereWithoutCategoriaInput[]
    deleteMany?: EventoScalarWhereInput | EventoScalarWhereInput[]
  }

  export type EventoUncheckedUpdateManyWithoutCategoriaNestedInput = {
    create?: XOR<EventoCreateWithoutCategoriaInput, EventoUncheckedCreateWithoutCategoriaInput> | EventoCreateWithoutCategoriaInput[] | EventoUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: EventoCreateOrConnectWithoutCategoriaInput | EventoCreateOrConnectWithoutCategoriaInput[]
    upsert?: EventoUpsertWithWhereUniqueWithoutCategoriaInput | EventoUpsertWithWhereUniqueWithoutCategoriaInput[]
    createMany?: EventoCreateManyCategoriaInputEnvelope
    set?: EventoWhereUniqueInput | EventoWhereUniqueInput[]
    disconnect?: EventoWhereUniqueInput | EventoWhereUniqueInput[]
    delete?: EventoWhereUniqueInput | EventoWhereUniqueInput[]
    connect?: EventoWhereUniqueInput | EventoWhereUniqueInput[]
    update?: EventoUpdateWithWhereUniqueWithoutCategoriaInput | EventoUpdateWithWhereUniqueWithoutCategoriaInput[]
    updateMany?: EventoUpdateManyWithWhereWithoutCategoriaInput | EventoUpdateManyWithWhereWithoutCategoriaInput[]
    deleteMany?: EventoScalarWhereInput | EventoScalarWhereInput[]
  }

  export type UtilizadorCreateNestedOneWithoutCarrinhosInput = {
    create?: XOR<UtilizadorCreateWithoutCarrinhosInput, UtilizadorUncheckedCreateWithoutCarrinhosInput>
    connectOrCreate?: UtilizadorCreateOrConnectWithoutCarrinhosInput
    connect?: UtilizadorWhereUniqueInput
  }

  export type ItensCarrinhoCreateNestedManyWithoutCarrinhoInput = {
    create?: XOR<ItensCarrinhoCreateWithoutCarrinhoInput, ItensCarrinhoUncheckedCreateWithoutCarrinhoInput> | ItensCarrinhoCreateWithoutCarrinhoInput[] | ItensCarrinhoUncheckedCreateWithoutCarrinhoInput[]
    connectOrCreate?: ItensCarrinhoCreateOrConnectWithoutCarrinhoInput | ItensCarrinhoCreateOrConnectWithoutCarrinhoInput[]
    createMany?: ItensCarrinhoCreateManyCarrinhoInputEnvelope
    connect?: ItensCarrinhoWhereUniqueInput | ItensCarrinhoWhereUniqueInput[]
  }

  export type ItensCarrinhoUncheckedCreateNestedManyWithoutCarrinhoInput = {
    create?: XOR<ItensCarrinhoCreateWithoutCarrinhoInput, ItensCarrinhoUncheckedCreateWithoutCarrinhoInput> | ItensCarrinhoCreateWithoutCarrinhoInput[] | ItensCarrinhoUncheckedCreateWithoutCarrinhoInput[]
    connectOrCreate?: ItensCarrinhoCreateOrConnectWithoutCarrinhoInput | ItensCarrinhoCreateOrConnectWithoutCarrinhoInput[]
    createMany?: ItensCarrinhoCreateManyCarrinhoInputEnvelope
    connect?: ItensCarrinhoWhereUniqueInput | ItensCarrinhoWhereUniqueInput[]
  }

  export type UtilizadorUpdateOneRequiredWithoutCarrinhosNestedInput = {
    create?: XOR<UtilizadorCreateWithoutCarrinhosInput, UtilizadorUncheckedCreateWithoutCarrinhosInput>
    connectOrCreate?: UtilizadorCreateOrConnectWithoutCarrinhosInput
    upsert?: UtilizadorUpsertWithoutCarrinhosInput
    connect?: UtilizadorWhereUniqueInput
    update?: XOR<XOR<UtilizadorUpdateToOneWithWhereWithoutCarrinhosInput, UtilizadorUpdateWithoutCarrinhosInput>, UtilizadorUncheckedUpdateWithoutCarrinhosInput>
  }

  export type ItensCarrinhoUpdateManyWithoutCarrinhoNestedInput = {
    create?: XOR<ItensCarrinhoCreateWithoutCarrinhoInput, ItensCarrinhoUncheckedCreateWithoutCarrinhoInput> | ItensCarrinhoCreateWithoutCarrinhoInput[] | ItensCarrinhoUncheckedCreateWithoutCarrinhoInput[]
    connectOrCreate?: ItensCarrinhoCreateOrConnectWithoutCarrinhoInput | ItensCarrinhoCreateOrConnectWithoutCarrinhoInput[]
    upsert?: ItensCarrinhoUpsertWithWhereUniqueWithoutCarrinhoInput | ItensCarrinhoUpsertWithWhereUniqueWithoutCarrinhoInput[]
    createMany?: ItensCarrinhoCreateManyCarrinhoInputEnvelope
    set?: ItensCarrinhoWhereUniqueInput | ItensCarrinhoWhereUniqueInput[]
    disconnect?: ItensCarrinhoWhereUniqueInput | ItensCarrinhoWhereUniqueInput[]
    delete?: ItensCarrinhoWhereUniqueInput | ItensCarrinhoWhereUniqueInput[]
    connect?: ItensCarrinhoWhereUniqueInput | ItensCarrinhoWhereUniqueInput[]
    update?: ItensCarrinhoUpdateWithWhereUniqueWithoutCarrinhoInput | ItensCarrinhoUpdateWithWhereUniqueWithoutCarrinhoInput[]
    updateMany?: ItensCarrinhoUpdateManyWithWhereWithoutCarrinhoInput | ItensCarrinhoUpdateManyWithWhereWithoutCarrinhoInput[]
    deleteMany?: ItensCarrinhoScalarWhereInput | ItensCarrinhoScalarWhereInput[]
  }

  export type ItensCarrinhoUncheckedUpdateManyWithoutCarrinhoNestedInput = {
    create?: XOR<ItensCarrinhoCreateWithoutCarrinhoInput, ItensCarrinhoUncheckedCreateWithoutCarrinhoInput> | ItensCarrinhoCreateWithoutCarrinhoInput[] | ItensCarrinhoUncheckedCreateWithoutCarrinhoInput[]
    connectOrCreate?: ItensCarrinhoCreateOrConnectWithoutCarrinhoInput | ItensCarrinhoCreateOrConnectWithoutCarrinhoInput[]
    upsert?: ItensCarrinhoUpsertWithWhereUniqueWithoutCarrinhoInput | ItensCarrinhoUpsertWithWhereUniqueWithoutCarrinhoInput[]
    createMany?: ItensCarrinhoCreateManyCarrinhoInputEnvelope
    set?: ItensCarrinhoWhereUniqueInput | ItensCarrinhoWhereUniqueInput[]
    disconnect?: ItensCarrinhoWhereUniqueInput | ItensCarrinhoWhereUniqueInput[]
    delete?: ItensCarrinhoWhereUniqueInput | ItensCarrinhoWhereUniqueInput[]
    connect?: ItensCarrinhoWhereUniqueInput | ItensCarrinhoWhereUniqueInput[]
    update?: ItensCarrinhoUpdateWithWhereUniqueWithoutCarrinhoInput | ItensCarrinhoUpdateWithWhereUniqueWithoutCarrinhoInput[]
    updateMany?: ItensCarrinhoUpdateManyWithWhereWithoutCarrinhoInput | ItensCarrinhoUpdateManyWithWhereWithoutCarrinhoInput[]
    deleteMany?: ItensCarrinhoScalarWhereInput | ItensCarrinhoScalarWhereInput[]
  }

  export type CarrinhoCreateNestedOneWithoutItensInput = {
    create?: XOR<CarrinhoCreateWithoutItensInput, CarrinhoUncheckedCreateWithoutItensInput>
    connectOrCreate?: CarrinhoCreateOrConnectWithoutItensInput
    connect?: CarrinhoWhereUniqueInput
  }

  export type EventoCreateNestedOneWithoutItensCarrinhoInput = {
    create?: XOR<EventoCreateWithoutItensCarrinhoInput, EventoUncheckedCreateWithoutItensCarrinhoInput>
    connectOrCreate?: EventoCreateOrConnectWithoutItensCarrinhoInput
    connect?: EventoWhereUniqueInput
  }

  export type CarrinhoUpdateOneRequiredWithoutItensNestedInput = {
    create?: XOR<CarrinhoCreateWithoutItensInput, CarrinhoUncheckedCreateWithoutItensInput>
    connectOrCreate?: CarrinhoCreateOrConnectWithoutItensInput
    upsert?: CarrinhoUpsertWithoutItensInput
    connect?: CarrinhoWhereUniqueInput
    update?: XOR<XOR<CarrinhoUpdateToOneWithWhereWithoutItensInput, CarrinhoUpdateWithoutItensInput>, CarrinhoUncheckedUpdateWithoutItensInput>
  }

  export type EventoUpdateOneRequiredWithoutItensCarrinhoNestedInput = {
    create?: XOR<EventoCreateWithoutItensCarrinhoInput, EventoUncheckedCreateWithoutItensCarrinhoInput>
    connectOrCreate?: EventoCreateOrConnectWithoutItensCarrinhoInput
    upsert?: EventoUpsertWithoutItensCarrinhoInput
    connect?: EventoWhereUniqueInput
    update?: XOR<XOR<EventoUpdateToOneWithWhereWithoutItensCarrinhoInput, EventoUpdateWithoutItensCarrinhoInput>, EventoUncheckedUpdateWithoutItensCarrinhoInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type CarrinhoCreateWithoutUtilizadorInput = {
    itens?: ItensCarrinhoCreateNestedManyWithoutCarrinhoInput
  }

  export type CarrinhoUncheckedCreateWithoutUtilizadorInput = {
    id?: number
    itens?: ItensCarrinhoUncheckedCreateNestedManyWithoutCarrinhoInput
  }

  export type CarrinhoCreateOrConnectWithoutUtilizadorInput = {
    where: CarrinhoWhereUniqueInput
    create: XOR<CarrinhoCreateWithoutUtilizadorInput, CarrinhoUncheckedCreateWithoutUtilizadorInput>
  }

  export type CarrinhoCreateManyUtilizadorInputEnvelope = {
    data: CarrinhoCreateManyUtilizadorInput | CarrinhoCreateManyUtilizadorInput[]
    skipDuplicates?: boolean
  }

  export type CarrinhoUpsertWithWhereUniqueWithoutUtilizadorInput = {
    where: CarrinhoWhereUniqueInput
    update: XOR<CarrinhoUpdateWithoutUtilizadorInput, CarrinhoUncheckedUpdateWithoutUtilizadorInput>
    create: XOR<CarrinhoCreateWithoutUtilizadorInput, CarrinhoUncheckedCreateWithoutUtilizadorInput>
  }

  export type CarrinhoUpdateWithWhereUniqueWithoutUtilizadorInput = {
    where: CarrinhoWhereUniqueInput
    data: XOR<CarrinhoUpdateWithoutUtilizadorInput, CarrinhoUncheckedUpdateWithoutUtilizadorInput>
  }

  export type CarrinhoUpdateManyWithWhereWithoutUtilizadorInput = {
    where: CarrinhoScalarWhereInput
    data: XOR<CarrinhoUpdateManyMutationInput, CarrinhoUncheckedUpdateManyWithoutUtilizadorInput>
  }

  export type CarrinhoScalarWhereInput = {
    AND?: CarrinhoScalarWhereInput | CarrinhoScalarWhereInput[]
    OR?: CarrinhoScalarWhereInput[]
    NOT?: CarrinhoScalarWhereInput | CarrinhoScalarWhereInput[]
    id?: IntFilter<"Carrinho"> | number
    utilizadorId?: IntFilter<"Carrinho"> | number
  }

  export type CategoriaEventoCreateWithoutEventosInput = {
    nome: string
  }

  export type CategoriaEventoUncheckedCreateWithoutEventosInput = {
    id?: number
    nome: string
  }

  export type CategoriaEventoCreateOrConnectWithoutEventosInput = {
    where: CategoriaEventoWhereUniqueInput
    create: XOR<CategoriaEventoCreateWithoutEventosInput, CategoriaEventoUncheckedCreateWithoutEventosInput>
  }

  export type ItensCarrinhoCreateWithoutEventoInput = {
    quantidade: number
    carrinho: CarrinhoCreateNestedOneWithoutItensInput
  }

  export type ItensCarrinhoUncheckedCreateWithoutEventoInput = {
    id?: number
    carrinhoId: number
    quantidade: number
  }

  export type ItensCarrinhoCreateOrConnectWithoutEventoInput = {
    where: ItensCarrinhoWhereUniqueInput
    create: XOR<ItensCarrinhoCreateWithoutEventoInput, ItensCarrinhoUncheckedCreateWithoutEventoInput>
  }

  export type ItensCarrinhoCreateManyEventoInputEnvelope = {
    data: ItensCarrinhoCreateManyEventoInput | ItensCarrinhoCreateManyEventoInput[]
    skipDuplicates?: boolean
  }

  export type CategoriaEventoUpsertWithoutEventosInput = {
    update: XOR<CategoriaEventoUpdateWithoutEventosInput, CategoriaEventoUncheckedUpdateWithoutEventosInput>
    create: XOR<CategoriaEventoCreateWithoutEventosInput, CategoriaEventoUncheckedCreateWithoutEventosInput>
    where?: CategoriaEventoWhereInput
  }

  export type CategoriaEventoUpdateToOneWithWhereWithoutEventosInput = {
    where?: CategoriaEventoWhereInput
    data: XOR<CategoriaEventoUpdateWithoutEventosInput, CategoriaEventoUncheckedUpdateWithoutEventosInput>
  }

  export type CategoriaEventoUpdateWithoutEventosInput = {
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type CategoriaEventoUncheckedUpdateWithoutEventosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type ItensCarrinhoUpsertWithWhereUniqueWithoutEventoInput = {
    where: ItensCarrinhoWhereUniqueInput
    update: XOR<ItensCarrinhoUpdateWithoutEventoInput, ItensCarrinhoUncheckedUpdateWithoutEventoInput>
    create: XOR<ItensCarrinhoCreateWithoutEventoInput, ItensCarrinhoUncheckedCreateWithoutEventoInput>
  }

  export type ItensCarrinhoUpdateWithWhereUniqueWithoutEventoInput = {
    where: ItensCarrinhoWhereUniqueInput
    data: XOR<ItensCarrinhoUpdateWithoutEventoInput, ItensCarrinhoUncheckedUpdateWithoutEventoInput>
  }

  export type ItensCarrinhoUpdateManyWithWhereWithoutEventoInput = {
    where: ItensCarrinhoScalarWhereInput
    data: XOR<ItensCarrinhoUpdateManyMutationInput, ItensCarrinhoUncheckedUpdateManyWithoutEventoInput>
  }

  export type ItensCarrinhoScalarWhereInput = {
    AND?: ItensCarrinhoScalarWhereInput | ItensCarrinhoScalarWhereInput[]
    OR?: ItensCarrinhoScalarWhereInput[]
    NOT?: ItensCarrinhoScalarWhereInput | ItensCarrinhoScalarWhereInput[]
    id?: IntFilter<"ItensCarrinho"> | number
    carrinhoId?: IntFilter<"ItensCarrinho"> | number
    eventoId?: IntFilter<"ItensCarrinho"> | number
    quantidade?: IntFilter<"ItensCarrinho"> | number
  }

  export type EventoCreateWithoutCategoriaInput = {
    nome: string
    data: Date | string
    localizacao: string
    foto: string
    descricao: string
    preco: number
    quantidade: number
    itensCarrinho?: ItensCarrinhoCreateNestedManyWithoutEventoInput
  }

  export type EventoUncheckedCreateWithoutCategoriaInput = {
    id?: number
    nome: string
    data: Date | string
    localizacao: string
    foto: string
    descricao: string
    preco: number
    quantidade: number
    itensCarrinho?: ItensCarrinhoUncheckedCreateNestedManyWithoutEventoInput
  }

  export type EventoCreateOrConnectWithoutCategoriaInput = {
    where: EventoWhereUniqueInput
    create: XOR<EventoCreateWithoutCategoriaInput, EventoUncheckedCreateWithoutCategoriaInput>
  }

  export type EventoCreateManyCategoriaInputEnvelope = {
    data: EventoCreateManyCategoriaInput | EventoCreateManyCategoriaInput[]
    skipDuplicates?: boolean
  }

  export type EventoUpsertWithWhereUniqueWithoutCategoriaInput = {
    where: EventoWhereUniqueInput
    update: XOR<EventoUpdateWithoutCategoriaInput, EventoUncheckedUpdateWithoutCategoriaInput>
    create: XOR<EventoCreateWithoutCategoriaInput, EventoUncheckedCreateWithoutCategoriaInput>
  }

  export type EventoUpdateWithWhereUniqueWithoutCategoriaInput = {
    where: EventoWhereUniqueInput
    data: XOR<EventoUpdateWithoutCategoriaInput, EventoUncheckedUpdateWithoutCategoriaInput>
  }

  export type EventoUpdateManyWithWhereWithoutCategoriaInput = {
    where: EventoScalarWhereInput
    data: XOR<EventoUpdateManyMutationInput, EventoUncheckedUpdateManyWithoutCategoriaInput>
  }

  export type EventoScalarWhereInput = {
    AND?: EventoScalarWhereInput | EventoScalarWhereInput[]
    OR?: EventoScalarWhereInput[]
    NOT?: EventoScalarWhereInput | EventoScalarWhereInput[]
    id?: IntFilter<"Evento"> | number
    nome?: StringFilter<"Evento"> | string
    data?: DateTimeFilter<"Evento"> | Date | string
    localizacao?: StringFilter<"Evento"> | string
    foto?: StringFilter<"Evento"> | string
    descricao?: StringFilter<"Evento"> | string
    preco?: FloatFilter<"Evento"> | number
    quantidade?: IntFilter<"Evento"> | number
    categoriaEventoId?: IntFilter<"Evento"> | number
  }

  export type UtilizadorCreateWithoutCarrinhosInput = {
    nome: string
    email: string
    isAdmin?: boolean
    password: string
    numtel: string
  }

  export type UtilizadorUncheckedCreateWithoutCarrinhosInput = {
    id?: number
    nome: string
    email: string
    isAdmin?: boolean
    password: string
    numtel: string
  }

  export type UtilizadorCreateOrConnectWithoutCarrinhosInput = {
    where: UtilizadorWhereUniqueInput
    create: XOR<UtilizadorCreateWithoutCarrinhosInput, UtilizadorUncheckedCreateWithoutCarrinhosInput>
  }

  export type ItensCarrinhoCreateWithoutCarrinhoInput = {
    quantidade: number
    evento: EventoCreateNestedOneWithoutItensCarrinhoInput
  }

  export type ItensCarrinhoUncheckedCreateWithoutCarrinhoInput = {
    id?: number
    eventoId: number
    quantidade: number
  }

  export type ItensCarrinhoCreateOrConnectWithoutCarrinhoInput = {
    where: ItensCarrinhoWhereUniqueInput
    create: XOR<ItensCarrinhoCreateWithoutCarrinhoInput, ItensCarrinhoUncheckedCreateWithoutCarrinhoInput>
  }

  export type ItensCarrinhoCreateManyCarrinhoInputEnvelope = {
    data: ItensCarrinhoCreateManyCarrinhoInput | ItensCarrinhoCreateManyCarrinhoInput[]
    skipDuplicates?: boolean
  }

  export type UtilizadorUpsertWithoutCarrinhosInput = {
    update: XOR<UtilizadorUpdateWithoutCarrinhosInput, UtilizadorUncheckedUpdateWithoutCarrinhosInput>
    create: XOR<UtilizadorCreateWithoutCarrinhosInput, UtilizadorUncheckedCreateWithoutCarrinhosInput>
    where?: UtilizadorWhereInput
  }

  export type UtilizadorUpdateToOneWithWhereWithoutCarrinhosInput = {
    where?: UtilizadorWhereInput
    data: XOR<UtilizadorUpdateWithoutCarrinhosInput, UtilizadorUncheckedUpdateWithoutCarrinhosInput>
  }

  export type UtilizadorUpdateWithoutCarrinhosInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    password?: StringFieldUpdateOperationsInput | string
    numtel?: StringFieldUpdateOperationsInput | string
  }

  export type UtilizadorUncheckedUpdateWithoutCarrinhosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    password?: StringFieldUpdateOperationsInput | string
    numtel?: StringFieldUpdateOperationsInput | string
  }

  export type ItensCarrinhoUpsertWithWhereUniqueWithoutCarrinhoInput = {
    where: ItensCarrinhoWhereUniqueInput
    update: XOR<ItensCarrinhoUpdateWithoutCarrinhoInput, ItensCarrinhoUncheckedUpdateWithoutCarrinhoInput>
    create: XOR<ItensCarrinhoCreateWithoutCarrinhoInput, ItensCarrinhoUncheckedCreateWithoutCarrinhoInput>
  }

  export type ItensCarrinhoUpdateWithWhereUniqueWithoutCarrinhoInput = {
    where: ItensCarrinhoWhereUniqueInput
    data: XOR<ItensCarrinhoUpdateWithoutCarrinhoInput, ItensCarrinhoUncheckedUpdateWithoutCarrinhoInput>
  }

  export type ItensCarrinhoUpdateManyWithWhereWithoutCarrinhoInput = {
    where: ItensCarrinhoScalarWhereInput
    data: XOR<ItensCarrinhoUpdateManyMutationInput, ItensCarrinhoUncheckedUpdateManyWithoutCarrinhoInput>
  }

  export type CarrinhoCreateWithoutItensInput = {
    utilizador: UtilizadorCreateNestedOneWithoutCarrinhosInput
  }

  export type CarrinhoUncheckedCreateWithoutItensInput = {
    id?: number
    utilizadorId: number
  }

  export type CarrinhoCreateOrConnectWithoutItensInput = {
    where: CarrinhoWhereUniqueInput
    create: XOR<CarrinhoCreateWithoutItensInput, CarrinhoUncheckedCreateWithoutItensInput>
  }

  export type EventoCreateWithoutItensCarrinhoInput = {
    nome: string
    data: Date | string
    localizacao: string
    foto: string
    descricao: string
    preco: number
    quantidade: number
    categoria: CategoriaEventoCreateNestedOneWithoutEventosInput
  }

  export type EventoUncheckedCreateWithoutItensCarrinhoInput = {
    id?: number
    nome: string
    data: Date | string
    localizacao: string
    foto: string
    descricao: string
    preco: number
    quantidade: number
    categoriaEventoId: number
  }

  export type EventoCreateOrConnectWithoutItensCarrinhoInput = {
    where: EventoWhereUniqueInput
    create: XOR<EventoCreateWithoutItensCarrinhoInput, EventoUncheckedCreateWithoutItensCarrinhoInput>
  }

  export type CarrinhoUpsertWithoutItensInput = {
    update: XOR<CarrinhoUpdateWithoutItensInput, CarrinhoUncheckedUpdateWithoutItensInput>
    create: XOR<CarrinhoCreateWithoutItensInput, CarrinhoUncheckedCreateWithoutItensInput>
    where?: CarrinhoWhereInput
  }

  export type CarrinhoUpdateToOneWithWhereWithoutItensInput = {
    where?: CarrinhoWhereInput
    data: XOR<CarrinhoUpdateWithoutItensInput, CarrinhoUncheckedUpdateWithoutItensInput>
  }

  export type CarrinhoUpdateWithoutItensInput = {
    utilizador?: UtilizadorUpdateOneRequiredWithoutCarrinhosNestedInput
  }

  export type CarrinhoUncheckedUpdateWithoutItensInput = {
    id?: IntFieldUpdateOperationsInput | number
    utilizadorId?: IntFieldUpdateOperationsInput | number
  }

  export type EventoUpsertWithoutItensCarrinhoInput = {
    update: XOR<EventoUpdateWithoutItensCarrinhoInput, EventoUncheckedUpdateWithoutItensCarrinhoInput>
    create: XOR<EventoCreateWithoutItensCarrinhoInput, EventoUncheckedCreateWithoutItensCarrinhoInput>
    where?: EventoWhereInput
  }

  export type EventoUpdateToOneWithWhereWithoutItensCarrinhoInput = {
    where?: EventoWhereInput
    data: XOR<EventoUpdateWithoutItensCarrinhoInput, EventoUncheckedUpdateWithoutItensCarrinhoInput>
  }

  export type EventoUpdateWithoutItensCarrinhoInput = {
    nome?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    localizacao?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    categoria?: CategoriaEventoUpdateOneRequiredWithoutEventosNestedInput
  }

  export type EventoUncheckedUpdateWithoutItensCarrinhoInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    localizacao?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    categoriaEventoId?: IntFieldUpdateOperationsInput | number
  }

  export type CarrinhoCreateManyUtilizadorInput = {
    id?: number
  }

  export type CarrinhoUpdateWithoutUtilizadorInput = {
    itens?: ItensCarrinhoUpdateManyWithoutCarrinhoNestedInput
  }

  export type CarrinhoUncheckedUpdateWithoutUtilizadorInput = {
    id?: IntFieldUpdateOperationsInput | number
    itens?: ItensCarrinhoUncheckedUpdateManyWithoutCarrinhoNestedInput
  }

  export type CarrinhoUncheckedUpdateManyWithoutUtilizadorInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type ItensCarrinhoCreateManyEventoInput = {
    id?: number
    carrinhoId: number
    quantidade: number
  }

  export type ItensCarrinhoUpdateWithoutEventoInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
    carrinho?: CarrinhoUpdateOneRequiredWithoutItensNestedInput
  }

  export type ItensCarrinhoUncheckedUpdateWithoutEventoInput = {
    id?: IntFieldUpdateOperationsInput | number
    carrinhoId?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type ItensCarrinhoUncheckedUpdateManyWithoutEventoInput = {
    id?: IntFieldUpdateOperationsInput | number
    carrinhoId?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type EventoCreateManyCategoriaInput = {
    id?: number
    nome: string
    data: Date | string
    localizacao: string
    foto: string
    descricao: string
    preco: number
    quantidade: number
  }

  export type EventoUpdateWithoutCategoriaInput = {
    nome?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    localizacao?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    itensCarrinho?: ItensCarrinhoUpdateManyWithoutEventoNestedInput
  }

  export type EventoUncheckedUpdateWithoutCategoriaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    localizacao?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    itensCarrinho?: ItensCarrinhoUncheckedUpdateManyWithoutEventoNestedInput
  }

  export type EventoUncheckedUpdateManyWithoutCategoriaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    localizacao?: StringFieldUpdateOperationsInput | string
    foto?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type ItensCarrinhoCreateManyCarrinhoInput = {
    id?: number
    eventoId: number
    quantidade: number
  }

  export type ItensCarrinhoUpdateWithoutCarrinhoInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
    evento?: EventoUpdateOneRequiredWithoutItensCarrinhoNestedInput
  }

  export type ItensCarrinhoUncheckedUpdateWithoutCarrinhoInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventoId?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
  }

  export type ItensCarrinhoUncheckedUpdateManyWithoutCarrinhoInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventoId?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UtilizadorCountOutputTypeDefaultArgs instead
     */
    export type UtilizadorCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UtilizadorCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventoCountOutputTypeDefaultArgs instead
     */
    export type EventoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoriaEventoCountOutputTypeDefaultArgs instead
     */
    export type CategoriaEventoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoriaEventoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CarrinhoCountOutputTypeDefaultArgs instead
     */
    export type CarrinhoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CarrinhoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UtilizadorDefaultArgs instead
     */
    export type UtilizadorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UtilizadorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventoDefaultArgs instead
     */
    export type EventoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoriaEventoDefaultArgs instead
     */
    export type CategoriaEventoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoriaEventoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CarrinhoDefaultArgs instead
     */
    export type CarrinhoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CarrinhoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ItensCarrinhoDefaultArgs instead
     */
    export type ItensCarrinhoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ItensCarrinhoDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}